import stdlib.paths
import stdlib.sets


// requires []
// provides []
@syntax
main(p:main) :- p match {
  
  Program(ds:decls) -> 
      {s:scope}
        new s,
        decls(s, ds)
        ,{s':scope}
          extendMe(s')
  }.


// requires [s]
// provides []
extendMe(s:scope) :- 
  {s':scope} 
    new s', 
    s -[ `LEX ]-> s'
  . 


// requires [s]
// provides []
@syntax
decls(@inh s:scope, ds:decls) :- ds match {
    
    DeclsNil() ->
      true
        
  | DeclsCons(ds:decls) -> 
      decl(s, ds),
      decls(s, ds)
  }.


// requires [s]
// provides []
@syntax
decl(@inh s:scope, d:decl) :- d match {

  DeclDef() ->
    {s':scope}
      new s',
      s -[ `LEX ]-> s'

  }.


// requires [s]
// provides [s]
foo(s:scope) :- 
  {s':scope}
    new s',
    new s, 
    s -[ `LEX ]-> s'.