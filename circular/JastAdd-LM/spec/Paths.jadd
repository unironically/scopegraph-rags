aspect Paths {

  public static Path Path.min(Path p1, Path p2) {

    Path p1rev = Path.rev(p1, new PathNil());
    Path p2rev = Path.rev(p2, new PathNil());

    Path p1tmp = p1rev;
    Path p2tmp = p2rev;

    while (!(p1tmp instanceof PathNil) && ! (p2tmp instanceof PathNil)) {

      if (p1tmp.getClass() != p2tmp.getClass()) {

        if (p1tmp.getChild(0) instanceof VarEdge) return p1;
        if (p2tmp.getChild(0) instanceof VarEdge) return p2;
        
        if (p1tmp.getChild(0) instanceof ModEdge) return p1;
        if (p2tmp.getChild(0) instanceof ModEdge) return p2;
        
        if (p1tmp.getChild(0) instanceof ImpEdge) return p1;
        if (p2tmp.getChild(0) instanceof ImpEdge) return p2;

      } else {

        p1tmp = (Path) p1tmp.getChild(1);
        p2tmp = (Path) p2tmp.getChild(1);

      }

    }

    if (p1tmp instanceof PathNil) return p1;
    return p2;

  }

  public static Path Path.rev(Path p, Path acc) {
    if (p instanceof PathNil) return acc;
    return Path.rev((Path) p.getChild(1), new PathCons((Edge) p.getChild(0), acc));
  }

  public boolean Edge.equals(Object o) {
    
    if (this instanceof LexEdge && o instanceof LexEdge) {
      LexEdge current = (LexEdge) this;
      LexEdge other = (LexEdge) o;
      boolean b = 
        current.getsrcNoTransform().equals(other.getsrcNoTransform()) &&
        current.gettgtNoTransform().equals(other.gettgtNoTransform());
      return b;
    }

    if (this instanceof LexEdgeRef && o instanceof LexEdgeRef) {
      LexEdgeRef other = (LexEdgeRef) o;
      LexEdgeRef current = (LexEdgeRef) this;
      boolean b =  
        current.getsrcNoTransform().equals(other.getsrcNoTransform()) &&
        current.gettgtNoTransform().equals(other.gettgtNoTransform());
      return b;
    }

    if (this instanceof ImpEdge && o instanceof ImpEdge) {
      ImpEdge other = (ImpEdge) o;
      ImpEdge current = (ImpEdge) this;
      boolean b =  
        current.getsrcNoTransform().equals(other.getsrcNoTransform()) &&
        current.gettgtNoTransform().equals(other.gettgtNoTransform());
      return b;
    }

    if (this instanceof ModEdge && o instanceof ModEdge) {
      ModEdge other = (ModEdge) o;
      ModEdge current = (ModEdge) this;
      boolean b =  
        current.getsrcNoTransform().equals(other.getsrcNoTransform()) &&
        current.gettgtNoTransform().equals(other.gettgtNoTransform());
      return b;
    }

    if (this instanceof VarEdge && o instanceof VarEdge) {
      VarEdge other = (VarEdge) o;
      VarEdge current = (VarEdge) this;
      boolean b =  
        current.getsrcNoTransform().equals(other.getsrcNoTransform()) &&
        current.gettgtNoTransform().equals(other.gettgtNoTransform());
      return b;
    }

    if (this instanceof ImpTentEdge && o instanceof ImpTentEdge) {
      ImpTentEdge other = (ImpTentEdge) o;
      ImpTentEdge current = (ImpTentEdge) this;
      boolean b =  
        current.getsrcNoTransform().equals(other.getsrcNoTransform()) &&
        current.gettgtNoTransform().equals(other.gettgtNoTransform());
      return b;
    }

    return false;

  }


  public boolean Resolution.equals(Object o) {
    if (!(o instanceof Resolution)) return false;

    //System.out.println("Testing resolution equality");

    Resolution other = (Resolution) o;

    return this.getrefNoTransform().equals(other.getrefNoTransform()) &&
           this.getpathNoTransform().equals(other.getpathNoTransform());
  }


  public boolean Path.equals(Object o) {
    if (!(o instanceof Path)) return false;

    //System.out.println("Testing path equality");

    if (this instanceof PathCons && o instanceof PathCons) {
      return ((Edge) this.getChild(0)).equals((Edge) ((Path) o).getChild(0)) &&
             ((Path) this.getChild(1)).equals((Path) ((Path) o).getChild(1));
    } else if (this instanceof PathNil && o instanceof PathNil) {
      return true;
    }

    return false;

  }

}

/*

p=
PathCons (
  1,
  p'=
  PathCons (
    2,
    p''=
    PathCons (
      3,
      p'''=
      PathNil()
    )
  )
)

Path.rev (p, PathNil())
= Path.rev (p', new PathCons(1, new PathNil()))
= Path.rev (p'', new PathCons(2, new PathCons(1, new PathNil())))

*/