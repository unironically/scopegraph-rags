* A demand driven model of AG evaluation.

We need a means for describing attribute grammars with higher order
and reference attributes and their evaluation.

The goal is to illustrate to correspondences between a model of Statix
constraint solving.

* The values in the model

Terms - these correspond to undecorated trees in Silver and to
inductive data types in OCaml and Haskell.

Trees - these correspond to decorated trees in Silver. They are trees
in which nodes edges to their children and parents. Nodes also have
slots for attributes. There is also a notion of identify for nodes.

Primitive types - integers, strings, etc.

* Context Free Grammars
- G = < NT, T, P > consisting on nonterminals, terminals, and
  production. Terminals here are primitive types, not the terminals
  seen in concrete syntax. There is no need for  start symbol.

Terms are structures build by productions in the grammar.

* Attribute Grammars
- G = <NT, T, P> 
  LHS and RHS elements of productions are named.
- A = A_i \cup A_s \cup A_l
  - names for inherited, synthesized, and local attributes
- O \subset NT x (A_i \cup A_s)  - an occurrence relation 
- O_L \subset P x A_l
- EQ_P - set of equations n.a = Exp
- Exp - expressions in equations

* Language for expression Exp
i: integers
str: string
trm: terms in G
n: node identifiers, for trees, with identify
attr: attribute name

Exp ::= i | str | n | trm
      | n.attr       -- attribute access
      | op (Exp_1 ... Exp_n)    - operator on primitive types
      | prod (Exp_1 ... Exp_n)  - make a term
      | decorate e   - convert term to tree, creating NotDemanded
                       attrs on all nodes, making node identifiers, etc.
                     - trees have identity, terms do not

Q:
-- what about nonterminal locals, eg.  top.tree.foo?
-- may need to generalize n or attr, maybe n.attr+

Q:
-- we may limit the language of Exp to only what is needed to build a
   scope graph.

Q:
-- besides OK attribute should we have an attribute to give the scope
   graph?  If so, do we need the OK attribute?
  
  
* types of values we will encounter
- primitive types - int, string, etc.
- NT term - value is like an OCaml inductive value
- NT tree - value is a node identifier in a tree
All easily stored in a slot and inlined into an expression

Scope graphs will be AG trees with references to other trees.


* Trees, more precisely

Tree nodes have a nonterminal type and constructing production. 
They have slots for
- all attributes that decorate the nonterminal
- all local attributes in the production.
These are identified by the node id and attribute name: e.g.  n34.type

Children have names as does the left hand side, not sure if these are
needed

* Trees
- nodes 
  n.nt   - its nonterminal
  n.prod - its production

  An attribute instance is an attribute slot on a tree node.
  with attribute instance slots, for each attribute attr
   n.attr.val
   n.attr.status    - used in evaluation
   n.attr.exp       - used in evaluation

- n.attr.deps - list of attr instances used so far in computing a
                expression
              - there may be at most one attr instance in process
              - this is not needed for evaluation, only to keep a
                record of the dependencies used during evaluation

** Attribute instances
An attribute's status is one of 3 values:
- Computed, and thus the `val` is available, otherwise _|_
- Demanded, being computed, has `exp` instantiated on it, otherwise _|_
- NotDemanded

We write id.attr.val or id.attr as a reference to the value of the attribute.
We write id.attr.status as a reference to its status.
We write id.attr.exp

* Some invariants on individual nodes
- n.attr.status = Computed  <==>  n.attr.val != _|_
- n.attr.status = Demanded  <==>  n.attr.exp != _|_

* Some global states

1. all n.a.status = NotDemanded

2. 0 or more "waiting" attribute instances, 1 "active" instance
   These are all Demanded

3. all n.a.status = Computed or NotDemanded
   done :: NT tree -> Boolean
   done (n) = \forall nodes in n, n.a.status = Computed or NotDemanded

* Some definitions

an "active" attribute instance
def active (n, a)
   - n.a.status = Demanded, thus  n.a.exp = e, e != _|_
   - redex(e) != n'.a'
     
a "waiting" attribute instance
def waiting (n, a)
   - n.a.status = Demanded, thus  n.a.exp = e and != _|_
   - redex(e) = n'.a'
   - n'.a'.status = Demanded








****** ------------------------------------------------------------
****** Evaluation
******

* Attribute evaluation
The "main" evaluation function - where we begin
- evaluate attr on term t creating a (decorated) tree

- eval :: NT term  A_s ->  NT tree
- eval t attr   

def eval (t, attr):
    requires: 
    - attr occurs on t and t 
    - attr does not depends on any inh attrs that decorate root of t

    n = decorate (t)
    demand (n, attr)
    while (n.attr.status != Computed) { step }

    ensures: done(n)

This is an iterative fixpoint algorithm that mimics the recursive
function/method calls used in some implementations (like Silver's)

Unlike some fixpoint algorithms, the choice of which step to take is
determinisitic.  There is always just one action that can be taken.

** Q: will having no steps to take mean that
  - n.attr.status = Computer, or
  - a cycle in the AG?

The algorithm (implicitly) maintains a stack of Demanded attribute
instances. 
This stack is the sequence of attribute instances
   n_0.a_0 ... n_m.a_m,  where m >= 0
such that
- n_0.a.0 is n.a in the single call to eval
- n_m.a_m is the top of the stack and the only active instance
  in the tree
- all others are waiting instances
- for all i, i >= 0, i < m
  redex(n_i.a_i.exp) = n_(i+1).a_(i+1)
  This means n_i.a_i is waiting on n_(i+1).a_(i+1).
  The next step in evaluating the expression n_i.a_i.exp is  n_(i+1).a_(i+1).
   

**** Different kinds of "steps" or operations performed by "steps"

* Tree decoration
- decorate :: NT term  ->  NT tree
- this creates the fully undecorated tree with all attribute
  slots having a status of NotDemanded

* Demanding an attribute - this is one kind of "step"
- demand :: NT tree   A   -> Unit
- demand (n, a)
def demand (n, a)
  requires: n.a.status = NotDemanded
  n.a.status := Demanded
  n.a.exp := instantiate (n, a)

  ensures: 
  - n.a.status = Demanded
  - n.a.exp  !=  _|_
  - active(n.a) holds

* Instantiating expressions
- instantiate :: NT term  A   -> Exp
- instantiate (n, a)
- replace lhs, child names in the expression in the equation defining
  n.a with with their node identifiers on n.
- e.g. If we have an `add` production with the equation
  top.value =  left.value + right.value
  then on an add node with children with node ids 12 and 45, we get 
  the expression  12.value + 45.value

- instantiate could be defined as subs(n) applied to e
  instantiating e with names from node n
  where subs(n) is the mapping of names to node identifiers

* Conclude or finish computing an attribute value
When we've finished evaluating an expression defining an attribute we
must convert its status from Demanded to Computed.
- finish :: NT tree  A  -> Unit
- finish (n, a)
def finish (n, a)
  requires:
    - a decorated n (maybe we can skip these type-checking kinds of thing
      and assume a static checker has ensured that no type errors occur
      during evaluation.  
    - n.a.status = Demanded
    - n.a.eq is a value
  n.a.status := Computed
  n.a.val := n.a.exp
  n.a.exp := _|_
  provides:
    - n.a is not computed, as indicated by the 3 assignments
  ** somewhere else we inline n.a.val into some expression


* Evaluating (small step) expressions
- For an expression e, redex(e) is the redex of the expression - 
  the next thing to be stepped


* step: NT tree -> NT tree
`step` is defined as a collection of guarded actions.
Exactly one guard condition is to be true, so we always have just one
step that can be taken.

Roughly, the steps are
1. take a (smal)l step in evaluating an expression
2. demand an attribute - making a new active attribute instance
3. finish up an attribute - making the active instance Computed and
   the one that was waiting on it is now active again

First, identify THE attribute instance n.a that satisfies a `when`
clause below.

* Some rules for evaluating an attribute references
- when redex(n.a.exp) = n'.attr' and n'.attr'.status = NotDemanded
  then demand (n', attr')
  thus active (n'.attr')
       waiting (n.attr)
  ** This is demanding a new attribute
  
- when redex(n.a.exp) = n'.attr' and n'.attr'.status = Computed
  then -- inline the value into the expression
    n.attr.eq := [ n'.attr'.val / n'.attr' ] n.attr.eq

  We read [ v / x] e to mean replace name x with value v in expression e.

- when redex(n.a.exp) = n'.attr' and n'.attr'.status = Demanded
  Then a cycle has been detected, abort.

* generic small step in expression evaluation
- when redex(n.a.exp) = op (v1 ... vn)
  then apply op to v1...vn and replace
     the redex with the resulting value in the equation
     n.attr.exp := [ vn / redex(e) ] n.a.exp

  This applies for building and decorating terms.

* finish up an attribute
- when n.a.exp = v
  then find n'.a' such that redex(n'.a'.exp) = n.a   -- n'.a' was waiting on n.a
       finish (n, a)
       n'.a'.exp := replace redex with n.a.val
   ** maybe just inline the finish function here and remove it





*** Note that we can observe a demanded attribute waiting for another
- if n.attr.status = Demanded and
     redex (n.attr.eq) = n'.attr' and
     n'.attr'.status = Demanded
  then we can't take a step on n.attr at this point
  we say that n.attr is waiting on n'.attr'



LocalWords:  nonterminal NonDemanded Statix
