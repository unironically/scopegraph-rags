* A draft model for Statix-core evaluation

-----

* A language model for Statix-core

- A module consists of a set of predicate definitions populated by constraints
  defined over a set of terms

** Module definition:
- id (x_0, ..., x_n) :- c   predicate definition

** Term language (t \in T):
- x \in X                   term variable from a term variable set X
- l \in L                   label - usually nullary but not in general
- s \in S                   a unique scope identifier
- id(t_0, ..., t_n) \in P   compound term
- p \in P                   path

** Set language (ts \in TS):
- âˆ…                         empty set
- z \in Z                   set variable from a set variable set Z
- {t}                       singleton
- ts_0 U ts_1               set union

** Path language (p \in P):
- End(s)                    last scope
- Edge(s, l, p)             intermediate scope and label

** Constraint language (c \in C):
- true                      constant
- false                     constant
- c, c                      conjunction
- t == t                    equality
- {x_0, ..., x_n} c         exists in c
- new t                     new scope
- new t -> t                new scope with data assertion
- t -[l]-> t                new edge
- t -> t                    data assertion
- t(t_0, ..., t_n)          predicate use
- query t r as t            query
- only(t_1, t_2)            t_2 = the single element in t_1
- inhabited(t)              t is a nonempty set
- min t_1 R t_2             t_2 = minimal subset of t_1 wrt. preorder R
- filter t_1 F t_2          t_2 = result of filtering t_1 wrt. F :: t -> Bool
- t match { t_0 -> c | ... | t_n -> c }     case analysis on a term



* A representation for scope graphs

- G = <S_G, E_G, D_G>
- S_G :: S                  a set of scope identifiers
- E_G :: S_G x L x S_G      a set of (scope, label, scope) pairs
- D_G :: S_G -> T           a mapping of scope identifiers to data terms

-----

* Evaluation, simply

Evaluation of a program in Statix-core entails solving an initial constraint.
Solving that constraint may increase or reduce the size of the constraint set,
which is initially a singleton.

Evaluation finishes when the constraint set is empty or stuck.

** Input - all of:
- a set of known predicates
- an initial constraint
- an empty scope graph

** Result - one of:
- Success           done
- Unsatisfiable     constraint unsatisfiable
- Stuck             evaluation stuck

** Operations:

*** Substitution
- substitute :: Powset(C) -> X -> T -> Powset(C)
- substitute(cs, id, t) = "C [t / id]", i.e. "replace id with t in all cs"
- used in solving exists constraints and predicate uses

- substituteAll :: Powset(C) -> (X x T) -> Powset(C)
- substituteAll(cs, subst) = "make all substitutions `subst` in `cs`"

** Evaluation function:

- eval :: (Powset(P), G, C) -> Result
- eval (ps, sg, c) = step (ps, sg, {c})
- invoke step with the single initial constraint

- pick :: Powset(C) -> C
- pick cs = c, by some metric chooses the next constraint to solve
- choose a constraint to solve next

- step :: (Powset(P), G, Powset(C)) -> Result
- step (ps, sg, cs) = 
    if cs not empty then
      if ! noneSolvable(cs) then
        let (sg', cs', result) = solve(ps, sg, pick(cs))
        if result = Success then
          let picked = pick(cs')
          step(ps, sg', picked, cs' - picked)
        else
          result
      else
        Stuck
    else
      Success
- pick a constraint and solve it

- solve :: (Powset(P), G, C, Powset(C)) -> (G, Powset(C), Result)
- solve (ps, sg, cur, rest) = case cur of

    | true  -> 
        (sg, rest, Success)

    | false -> 
        (sg, [], Unsatisfiable)

    | c_0, c_1  ->
        (sg, {c_0, c_1} U rest, Success)

    | t_0 == t_1 ->
        let (unifiable, subst) = unify(t_0, t_1)
        (sg, substAll(subst, rest), if unifiable then Success else Unsatisfiable)

    | {x_0, ..., x_n} c ->
        forall x_i in x_0, ..., x_n
          c = substitute(c, x_i, newUniqueVar())
        (sg, {c} U rest, Success)

    | new t ->
        if isTermVar(t) then
          (addScope(sg, t), rest, Success)
        else
          (sg, {}, Unsatisfiable)

    | new t_0 -> t_1 ->
        if isTermVar(t) then
          (addScope(sg, t_0, t_1), []) 
        else
          (sg, {}, Unsatisfiable)

    | t_0 -[l]-> t_1 ->
        if isScope(t_0) and isScope(t_1) then
          (addEdge(sg, t_0, l, t_1), rest, Success)
        else
          (sg, {cur} U rest, Success)

    | t_0 -> t_1 ->
        if isScope(t_0) then
          (addDatum(sg, t_0, t_1), [])
        else
          (sg, {cur} U rest, Success)

    | id (t_0, ..., t_n) ->
        let pred be the result of lookup(ps, id)
        if not null(pred) then
            pred has form `p(x_0, ..., x_n) :- c`
            forall x_i in x_0, ..., x_n
              c = substitute {c} x_i t_i
            (sg, {c} U rest, Success)
        else
          (sg, {}, Unsatisfiable)

    | query t_in rgx as t_out ->
        if isScope(t_in) and empty weaklyCritical(s, rgx) then
          let paths = runQuery(t_in, rgx)
          (sg, substitute(rest, t_out, paths), Success) 
        else
          (sg, {cur} U rest, Success)

    | only(ts, t) ->
        if singleton(ts) then
          if isTermVar(t) then
            (sg, substitute(rest, t, getSingleton(ts)), Success)
          else
            (sg, rest, Success)
        else
          (sg, {}, Unsatisfiable)

    | inhabited(ts) ->
        (sg, rest, if empty(ts) then Unsatisfiable else Success)

    | min ts_in R ts_out ->
        let minSet = min(ts_in, R)
        if isSetVar(ts_out)
          (sg, substitute(rest, ts_out, minSet), Success)
        else
          let (unifiable, subst) = unify(minSet, ts_out)
          (sg, substituteAll(rest, subst), if unifiable then Success else Unsatisfiable)

    | filter ts_in F ts_out ->
        let filtered = filter(ts_in, F)
        if isSetVar(ts_out)
          (sg, substitute(rest, ts_out, filtered), Success)
        else
          let (unifiable, subst) = unify(filtered, ts_out)
          (sg, substituteAll(rest, subst), if unifiable then Success else Unsatisfiable)

    | t match { t_0 -> c_0 | ... | t_n -> c_n } ->
        let (found, case) = findMatch(t, { t_0 -> c_0 | ... | t_n -> c_n })
        if found then
          let t_i -> c_i = case
          let x_0, ..., x_n be parameters of t_i
          forall x_k in x_0, ..., x_n
            c_i = substitute {c_i} x_k newUniqueVar()
          (sg, {c_i} U rest, Success)
        else
          (sg, {}, Unsatisfiable)

** Queries:

For a query `query t_in rgx as t_out`, the query can only run when t_in is a
known scope identifier, and there are no weakly critical edges for the query.

What is a weakly critical edge?

If there is a path `p` from the start scope `s_1` to some scope `s_2` such that
the label sequence from `p` forms word `w`, and there is an edge assertion
`s_2 -[ l ]-> t` in the rest of the constraint set, then this is a weakly 
critical edge when `w \dot l` (concat) is a prefix of some word in the language
of rgx.

There is then some process which, when the start scope is known, traverses
the scope graph w.r.t. rgx from that scope and looks at the unsolved edge
assertions for each scope arrived in.

When the start scope is known, and there are no weakly critical edges for the
query, then the query can run and produce a result.

-----

* A search for dependencies


Certain constraints cannot be solved if their arguments do not conform to some
condition, such as being a variable, being a scope, etc.


** Solvable?

"Solvable" i.e., the constraint is ready to produce some result. Whether it be
success or otherwise.

- true/false                always solvable
- t_0 == t_1                always solvable
- c_0, c_1                  always solvable
- {x_0, ..., x_n} c         always solvable
- new t                     always solvable
- new t_0 -> t_1            always solvable
- t_0 -[ l ]-> t_1          solvable when t_0 and t_1 are scope identifiers
- t_0 -> t_1                solvable when t_0 is a scope identifier
- id (t_0, ..., t_n)        solvable when id is a known n-ary predicate and args unify with formals
- query t_in rgx as t_out   solvable when t_in is a scope identifier and there are no weakly critical edges
- only(ts, t)               solvable when ts is a set literal
- inhabited(ts)             solvable when ts is a set literal
- min ts_in R ts_out        solvable when ts_in is a set literal
- filter ts_in F ts_out     solvable when ts_in is a set literal
- t match {cases}           solvable when ? -- todo: what is the condition here?


** Substitutions?

Solving which constraints leads to substitutions in the remaining constraint set?

- true/false                n/a
- t_0 == t_1                propagates resulting unification substitution
- c_0, c_1                  n/a
- {x_0, ..., x_n} c         replaces x_0, ..., x_n with unique IDs x_0', ..., x_n'
- new t                     replaces t with new set identifier s
- new t_0 -> t_1            replaces t_0 with new set identifier s
- t_0 -[ l ]-> t_1          n/a
- t_0 -> t_1                n/a
- id (t_0, ..., t_n)        n/a
- query t_in rgx as t_out   replaces t_out with the path set query result
- only(ts, t)               n/a
- inhabited(ts)             n/a
- min ts_in R ts_out        replaces ts_out with the literal of the minimal set
- filter ts_in F ts_out     replaces ts_out with the literal of the filtered set
- t match {cases}           n/a

** Grounding?

Of the above - where are names replaced by ground terms?

- t_0 == t_1                grounds all x where (x |-> t) in subst result and t is ground
- {x_0, ..., x_n} c         n/a - replaces term variable with term variable
- new t                     new scope identifier s is ground, replaces t
- new t_0 -> t_1            new scope identifier s is ground, replaces t_0
- query t_in rgx as t_out   a ground set of paths replaces t_out
- min ts_in R ts_out        a ground set replaces ts_out
- filter ts_in F ts_out     a ground set replaces ts_out

We can recognize these constraints as "grounders" for the names which are
replaced by the ground terms described. For example, the constraint `new t`
is the grounder of `t`, `query t_in rgx as t_out` is the grounder of t_out.


** Dependencies?

By identifying the "grounder" constraint for a particular term variable, we can
say that other constraints that are solvable when that term variable is ground
must be solved AFTER the "grounding constraint" for the name.

We can also say that instances of constraints which require certain arguments to 
be ground, but instead have term variables for those arguments, depend on
those names.

The names on the other hand inherit the dependencies of the constraint which
grounds them. i.e. for `min ts_in R ts_out`, `ts_out` depends it being solved
which depends on `ts_in` being ground. Thus `ts_out` depends on `ts_in`.
Similar to attribute grammars where a name depends on all of the dependencies
of its defining equation.

If a constraint has no dependencies, it can be solved.

Constraints of dependencies?

- true/false                no dependencies
- t_0 == t_1                no dependencies
- c_0, c_1                  no dependencies
- {x_0, ..., x_n} c         no dependencies
- new t                     no dependencies
- new t_0 -> t_1            no dependencies
- t_0 -[ l ]-> t_1          depends on t_0, t_1
- t_0 -> t_1                depends on t_0
- id (t_0, ..., t_n)        no dependencies
- query t_in rgx as t_out   depends on t_in and no weakly critical edges
- only(ts, t)               depends on ts_in
- inhabited(ts)             depends on ts
- min ts_in R ts_out        depends on ts_in
- filter ts_in F ts_out     depends on ts_in
- t match {cases}           no dependencies ?

The odd cases:

- `t_0 -[ l ]-> t_1`
Unlike other cases, the dependency of other names on t_0 and t_1 is not clear.
This edge may be weakly critical for some query, in which case the name made
ground by the query will depend on this constraint being solved, which depends
on t_0 and t_1 being ground. Thus forall `query t_in rgx t_out`, t_out depends
on t_0 and t_1 if `t_0 -[ l ]-> t_1` is weakly critical for the query.

- `query t_in rgx as t_out`
The dependencies of t_out on the weakly critical edges (as described above) are
not explicit in the constraint. We need to work out the weakly critical edges
based on the query parameters.


** Exists constraint

No dependencies, but introduces new unique names to its child constraint when solved.
In `{x} c` there may be references to `x` in `c`. When this constraint is solved, some
unique `x_1` is generated and then `x_1` replaces `x` in `c`.

The exists constraint defines term variables, but solving it never grounds them. The
names within the exists are simply usable in the child constraint set. Some other
constraint must be solved in order for `x_1` to be made ground.

This behavior similar to declarators in C, where we can declare `int x;` and refer to
`x` in the following code. It may or may not have a value depending on whether `x` is
given a definition in some other statement. Such as `x = 20;`.

So then, are there ever any dependencies that result from the use of an exists constraint?

```
{x}
  new x
  x -[ LEX ]-> y            for some known y
```

In the above, solving the edge assertion depends on `x` and `y` being ground.
Assume `y` is already ground. Then there is a dependency on `x`. `x` is made 
ground by solving `new x`, which itself has no dependencies. There is no
dependency on the exists constraint.

In fact, the child constraint of an exists (`c` in `{x} c`) does not join the
constraint set that we are operating over until the exists constraint itself
is solved and disappears after the unique names are computed. So `c` is never
really "visible" until `{x} c` is solved, by which time `{x} c` itself vanishes.

So there is never any dependency on the eixsts constraint itself.


** Grounding unification cases with `==`

Interestingly `==` can also make term variables ground.

```
-- assume p is a ground path 
{s, d, x, ty}
  tgt(p, s),
  s -> d,
  d == DatumVar(x, ty)
```

In the above case, `x` and `ty` are made ground by the constraint
`d == DatumVar(x, ty)` so long as the datum of the scope `s` at the end of path
`p` has shape `DatumVar(x', ty')`. In which case `x` is replaced by `x'` and
`ty` by `ty'` in the remaining constraint set. So if `x'` and `ty'` are ground,
`x` and `ty` have been effectively made ground by solving this equality.


** Unification example from LM

What dependencies can we derive from the below case for ExprApp?

```
expr(s, e, ty) :- e match
  { ...
  | ExprApp(e1, e2) -> {ty1, ty2, ty3}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty2 == ty3,
      ty1 == FUN(ty3, ty)
  | ...
  }.
```

- `ty1` depends on `s` and `e1`
- `ty2` depends on `s` and `e2`
- `ty3` depends on `ty1`
- `ty`  depends on `ty1`

What general rule is there for deriving dependencies from an `==`, if any?

- `ty == INT()` grounds `ty`
- `ty == FUN(INT(), INT())` grounds `ty`
- `ty == v` does not ground `ty`
- `ty == FUN(dom, cdom)` does not ground `ty
- `FUN(INT(), INT()) == FUN(dom, cdom)` ground `dom` and `cdom`
- `FUN(v, INT()) == FUN(dom, cdom)` grounds `cdom`

If the substitution result from unification is:
{
  v_1 |-> v_13,
  v_13 |-> v_1,
  v_2 |-> INT(),
  v_3 |-> FUN(v_2, v_13)
}

Then only `v_2` is made ground. `v_3` is not, because `v_13` is not ground.

It seems as though the names which are ground by an `==` are those which in the
substitution resulting from solving the `==`, are mapped to ground terms.

-- todo: does `ty2 == ty3` introduce any dependencies?

-----

* An attribute grammars perspective

** Terms and trees

*** Terms

In attribute grammars we have undecorated syntax trees which we call terms.
These are not decorated by any attributes.

-- Q: is a term in AGs still called a term if it contains variables?

Similarly in Statix we have terms of the same kind, defined by the term language
of the Statix model being defined.

*** Trees

We also have trees in attribute grammars, which are terms that have been
decorated with attributes. The decorating of a tree produces a set of equations
of the form `n_i.a_i = e` where `n_i` is a tree node, `a_i` is an attribute on
it, and `e` is a defining expression. `e` may make use of other nodes and their
attributes. So we can think of a decorated tree as a flattened set of such
equations. The structure of the term is partly preserved by the relationships
between the equations which remain.

An analogy for decorated trees in Statix involves the use of Statix rules which
rewrite to a body constraint based on a syntactic term argument. Then any child
terms are also used in other predicates uses which match on those children and
so on. Eventually the entire term is explored using Statix rules, and at each
analysis of a sub-term, some constraint is discovered for it. This constraint
replaces the syntactic predicate which invoked the exploration of the term.

** "Decorating" in Statix

Consider the initial constraint:

`main(Program(DeclsCons(DeclModule("A", ds_1), DeclsCons(DeclModule("B", ds_2), DeclsNil()))))`
where `ds_1` and `ds_2` are some sub-term.

Note that I am using `ds_1` and `ds_2` as shorthand for some large terms.

And Statix rules:

```
main (p) :- p match {
    Program(ds):[]  -> 
        {s}
            new s,
            decls(s, ds)
    }.

decls (s, ds) :- ds match {
    DeclsNil()  -> 
        true
    | DeclsCons(d, ds)  -> 
        decl(s, d),
        decls(s, ds)
    }.

decl (s, d) :- d match {
    DeclModule(x, ds)  -> 
        {s_mod}
            new s_mod -> DatumMod(x, s_mod),
            s -[ `MOD ]-> s_mod,
            s_mod -[ `LEX ]-> s,
            decls(s_mod, ds)
    | ...
    }.
```

Every sub-term in the initial term can be associated with a tree node ID:

```
Program(                p_1
  DeclsCons(            ds_0
    DeclModule(         d_1
      "A",
      ds_1              ds_1
    ), 
    DeclsCons(          ds_3
      DeclModule(       d_2
        "B",
        ds_2            ds_2
      ), 
      DeclsNil()        ds_4
    )
  )
)
```

If we replace sub-term names in the Statix rules with these node IDs, then we
get the following associations between node IDs and constraints:

```
p_1:
  {s}
    new s,
    decls(s, ds_0)

ds_0:
  decl(s, d_1),
  decls(s, ds_3)

d_1:
  {s_mod}
    new s_mod -> DatumMod("A", s_mod),
    s -[ `MOD ]-> s_mod,
    s_mod -[ `LEX ]-> s,
    decls(s_mod, ds_1)

ds_1:
  ?                         some constraint based on what ds_1 looks like

ds_3:
  decl(s, d_2),
  decls(s, ds_4)

d_2:
  {s_mod}
    new s_mod -> DatumMod("B", s_mod),
    s -[ `MOD ]-> s_mod,
    s_mod -[ `LEX ]-> s,
    decls(s_mod, ds_2)

ds_2:
  ?                         some constraint based on what ds_2 looks like

ds_4:
  true
```

We can imagine the term being decorated in place with the constraint which is
here associated to it.

-- todo: continue...

-----



