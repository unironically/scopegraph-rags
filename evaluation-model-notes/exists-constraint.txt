* On the exists constraint

Fleshing out this particular constraint and its relationship to names defined
in attribute grammar productions.

________________________________________________________________________________
________________________________________________________________________________


** As defined in Ministatix, Scopes as Types and Knowing When to Ask

*** Ministatix syntax:

`{x_0, ..., x_n} c`

where:
- `x_i`s are term variables from some set X
- `c` is a constraint

*** Knowing When to Ask - Statix-core step relation (Appendix B):

```
    y is fresh for G and C̄
------------------------------- [OP-EXISTS]
<G, (∃x.C);C̄> -> <G, C[y/x];C̄>
```

To solve an exists `x` in `C` constraint, introduce a new name `y` that is 
unique with respect to G and C̄, and substitute `y` for `x` in `C`.


*** Scopes as Types - Declarative semantics of Statix (Fig. 14)

```
 G, φ[t/x] |=_s C   x is fresh for φ
------------------------------------ [DS-EXISTS]
          G, φ |=_s ∃x.C
```

-- Q: Where does `t` come from here?

________________________________________________________________________________

** Examples of usage in Ministatix rules:

*** Introducing a name for a module scope:

Here we assert the existence of a name `s_mod` which is used in its child
constraint as the name of a new module scope, and then passed to the
`ds::decls` child of `DeclModule`.

```
decl (s, d) :- d match {
  DeclModule(x, ds)  -> 
    {s_mod}
      new s_mod -> DatumMod(x, s_mod),
      s -[ `MOD ]-> s_mod,
      s_mod -[ `LEX ]-> s,
      decls(s_mod, ds)
  | ...
  }.
```

*** Introducing a name for an expression type:

Asserting names `ty1`, `ty2` as the types of the two expression children.
Equality of those types is asserted by `ty1 == ty2`.

```
expr (s, e, ty) :- e match {
  | ExprEq(e1, e2)  -> 
      {ty1, ty2}
        expr(s, e1, ty1),
        expr(s, e2, ty2),
        ty1 == ty2,
        ty == BOOL()
  | ...  
  }.
```

________________________________________________________________________________


** A step example

In the below sequence of steps, we replace the use of `decl(...)` by the body
of the `DeclModule` case (the exists constraint), and then solve the exists
constraint to generate a fresh unique name `s_mod_1` to replace `s_mod`.

Then we solve the `new` constraint to generate a new scope identifier _S_231_
which replaces s_mod_1.

```
decl(s_1, DeclModule("A", ds_1))        for some concrete sub-term ds_1

--->                                    stepping on decl(...)

DeclModule("A", ds_1) match { ... }

--->                                    finding a matching case for DeclModule

{s_mod}
  new s_mod -> DatumMod(x, s_mod),
  s_1 -[ `MOD ]-> s_mod,
  s_mod -[ `LEX ]-> s_1,
  decls(s_mod, ds)

--->                                    stepping on the exists constraint

new s_mod_1 -> DatumMod("A", s_mod_1),
s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
decls(s_mod_1, ds_1)

--->                                    solving the `new` constraint

s_1 -[ `MOD ]-> _S_231_,
_S_231_ -[ `LEX ]-> s_1,
decls(_S_231_, ds_1)

-->

...
```

________________________________________________________________________________

*** Erroneous uses of names introduced by an exists

In the `DeclModule` rule, the name `s_mod` is visible in the constraint child
of the exists assertion. So we refer to it in the constraints which follow,
as the local name for some module scope.

```
decl (s, d) :- d match {
  DeclModule(x, ds)  -> 
    {s_mod}
      new s_mod -> DatumMod(x, s_mod),
      s -[ `MOD ]-> s_mod,
      s_mod -[ `LEX ]-> s,
      decls(s_mod, ds)
  | ...
  }.
```

If we were to place another exists constraint within the body of the `s_mod`
one, as in the below with `foo`, then that name `foo` is only local to its own
constraint child. So the use of the second foo in the `DeclModule` rule below
is erroneous. On the other hand, the constraints within the `foo` exists' child
are good - `foo` is local there.

```
decl (s, d) :- d match {
  DeclModule(x, ds)  -> 
    {s_mod}
      new s_mod -> DatumMod(x, s_mod),
      s -[ `MOD ]-> s_mod,
      s_mod -[ `LEX ]-> s,
      {foo}
        new foo,
        foo -[ LEX ]-> s
      s_mod -[ VAR ]-> foo              error, name foo not visible
      decls(s_mod, ds)
  | ...
  }.
```

Similarly, the below is also erroneous for the first and last edge assertions.
Sibling exists constraints cannot use each other's names. Parens are required
around the first sibling here, as conjunction binds more tightly than exists.

```
decl (s, d) :- d match {
  DeclModule(x, ds)  -> 
    ({foo}
      new foo,
      foo -[ LEX ]-> s_mod),            error, name s_mod not visible
    {s_mod}
      new s_mod -> DatumMod(x, s_mod),
      s -[ `MOD ]-> s_mod,
      s_mod -[ `LEX ]-> s,
      s_mod -[ VAR ]-> foo              error, name foo not visible
      decls(s_mod, ds)
  | ...
  }.
```

It is worth nothing that the Ministatix semantics dictate that a name can only
be used if it was introduced by an exists or by matching. We cannot simply
use name `foo` in a constraint without it being brought into existence by
either being a name in some matched term (like `x` and `ds` above) or by an
exists constraint. Thus the below is also erroneous.

```
decl (s, d) :- d match {
  DeclModule(x, ds)  -> 
    {s_mod}
      new s_mod -> DatumMod(x, s_mod),
      s -[ `MOD ]-> s_mod,
      s_mod -[ `LEX ]-> s,
      new foo,                          error, name foo not visible
      foo -[ LEX ]-> s                  error, name foo not visible
      s_mod -[ VAR ]-> foo              error, name foo not visible
      decls(s_mod, ds)
  | ...
  }.
```

________________________________________________________________________________

** Propagating names downwards when unfolding a tree

After the exists constraint has been solved and the fresh name generated, uses
of `s_mod` are replaced with `s_mod_1` in what was the child constraint of the
exists. So `decls(s_mod ...)` in the `DeclModule` rule is instantiated to be 
`decls(s_mod_1, ...)`. Then the `s` argument in the `decls` predicate is also
instantiated to `s_mod_1` when the `decls` predicate is solved.

Thus when generating the constraints for a tree, `s_mod_1` is carried directly
to the constraints which are associated with the sub-trees of the module decl.

If instances of `s_mod_1` later rewritten to some other name or identifier, as
is the case when the `new` constraint below is solved, then all of the uses
of `s_mod_1` are substituted in one step for the new name. If we were to solve
the `new` constraint below, involving creating a new scope identifer _S_231_
then all instances of `s_mod_1` in the constraint tree are rewritten to _S_231_
in the same step, based on the [OP-NODE-FRESH] rule in Knowing When to Ask.

```
...                                     see prev. step section

--->                                    solving the `new` constraint

new s_mod_1 -> DatumMod("A", s_mod_1)
s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
decls(s_mod_1, DeclsCons(DeclDef(b_1), DeclsNil()))       for some sub-term b_1

--->                                    solving predicate decls

s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
DeclsCons(DeclDef(b_1), DeclsNil()) match { ... }

--->                                    solving the match

s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
decl(s_mod_1, DeclDef(b_1)),
decls(s_mod_1, DeclsNil())

--->                                    solving predicate decl

s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
DeclDef(b_1) match { ... },
decls(s_mod_1, DeclsNil())

--->                                    solving the match

s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
par-bind(s_mod_1, b_1, s_mod_1),
decls(s_mod_1, DeclsNil())

--->                                    solving predicate decls

s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
par-bind(s_mod_1, b_1, s_mod_1),
DeclsNil() match { ... }

--->                                    solving the match

s_1 -[ `MOD ]-> s_mod_1,
s_mod_1 -[ `LEX ]-> s_1,
par-bind(s_mod_1, b_1, s_mod_1),
true

--->

...
```

-- Note: this act of replacing all the `s_mod_1`s with `_S_231_` is akin to
         evaluating equation `d_1.s_mod = mkScope();` and then rewriting all
         instances of `d_1.s_mod` in a set of equations to a reference to the
         scope node created by `mkScope()`.
________________________________________________________________________________
________________________________________________________________________________

** Similarity of "exists" to locals in a production specification

The Statix rule for `DeclModule` below:

```
decl (s, d) :- d match {
  DeclModule(x, ds)  -> 
    {s_mod}
      new s_mod -> DatumMod(x, s_mod),
      s -[ `MOD ]-> s_mod,
      s_mod -[ `LEX ]-> s,
      decls(s_mod, ds)
  | ...
  }.
```

Corresponds closely to the following in an attribute grammar:

```
nonterminal Decl with s;

prod DeclModule 
top::Decl ::= x::String ds::Decls
{
  local s_mod::Scope = mkScope(DatumMod(x));
  top.MOD_s = [s_mod];
  s_mod.LEX = top.s :: ...;
  ds.s = s_mod;
}
```

Although the following Ministatix and attribute grammar code do not align:

```
foo(s, expr) :- expr match
   Bar(a, b) ->
     {scopeA}
       new scopeA,
       baz(scopeA, a),
     {scopeB}
       new scopeB,
       baz(scopeB, b)
 | ...
 }.
```

```
nonterminal Foo with s;

prod bar
top::Foo ::= a::Baz b::Baz
{
  local scopeA::Scope = mkScope();
  a.s = scopeA;
  local scopeB::Scope = mkScope();
  b.s = scopeB;
}
```

However, in a translation setting the production above is ok because the
constraints under `scopeB` do not interact with the name `scopeA` and vice
versa. Despite `scopeA` and `scopeB` being visible everywhere in the production,
because the translation from Ministatix cannot mix these names between the
exists bodies, they do not interact in the production in a way that would
correspond to something erroneous in Statix.

However, there is still something to be said about the difference in scoping
structure between the Statix rule above and its AGs counterpart. How would we
capture that in an attribute grammar?

________________________________________________________________________________

** Passing a Statix name down directly, vs. solving inherited copy equations

As we saw previously, when an exists constraint is solved a unique fresh name
is generated, which replaces the "local" name which we see in a rule spec. That
new unique name may then travel to more distant parts of the constraint set/tree
where it could be used directly in an edge assertion, for instance.

-- todo: discuss the following with eric to clarify, might be bs

In an attribute grammar, the name of a local attribute such as `s_mod` becomes
part of a qualified identifier associated with a tree node of the kind which
the production `s_mod` appears in defines. So for a `declModule::Decl` node
called `d_123`, the name `d_123.s_mod` is generated. If this scope is to be
passed down to a child (`ds`, say) of the module declaration, then an inherited
attribute (`s`, say) decorates that child node, whose value we define in the
module decl production with `ds.s = s_mod`. Which when instantiating attributes
becomes something like `ds_456.s = d_123.s_mod`.

Perhaps the production associated with that child has a copy equation like
`d.s = top.s`, which may then be instantiated to `d_789.s = ds_456.s`. By
performing a small step on this equation, we use `ds_456.s = d_123.s_mod` so
that `d_789.s = ds_456.s` becomes `d_789.s = d_123.s_mod`.

In this way, the unique identifier `d_123.s_mod` is passed down the tree at
evaluation time - by a sequence of small steps which replace intermediate refs
by the identifier `d_123.s_mod` so that name trickles down the decorated tree.
Of course, there may be other equations which use `d_123.s_mod` which are not
simple copy equations.

The evaluation of `{s_mod} ... s_mod ...` to `... s_mod_1 ...` initially only
affects the constraints that are immediately within the exists based on how the 
rule spec is written. Similarly, instantiating `local s_mod ...` on node `d_123`
only affects the equations that come from the same production at first. We need
some more attribute evaluation to happen in order for `d_123.s_mod` to appear 
within equations which originate from other productions on other nodes. So we 
can think of solving an exists constraint to be similar to instantiating a local
attribute in some way. At least, from the perspective of solving equations on a
decorated tree vs. solving constraints that label tree nodes in a Statix tree.

-- something to think about: what if we changed statix evaluation so that you
   can solve predicates that are within an exists without solving the exists
   itself, how would this change the relationship with attribute grammars?

________________________________________________________________________________

