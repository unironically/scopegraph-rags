import statixlib.paths
import statixlib.sets


syntax:
main(p) :- p match {

    Program(ds):[] ->
      {s}
      new s,
      decls(s, s, ds)

}.



// s:        lexical scope
// s_modparent:    outer scope of module

syntax:
decls(inh: s, inh: s_modparent, ds) :- ds match {
  
    DeclsNil() ->
        true

  | DeclsCons(d, ds) ->
        {s_next}
        new s_next,
        s_next -[ `LEX ]-> s,
        decl(s_next, s, s_modparent d),
        decls(s_next, s_modparent, ds)

}.



// s:        lexical scope
// s_lookup: lookup scope (prev. lexical)
// s_modparent:    outer scope of module

syntax:
decl(inh: s, inh: s_lookup, inh: s_modparent d) :- d match {
    
    DeclModule(x, ds) ->
      {s_mod}
      new s_mod -> (x, s_mod),
      s_modparent -[ `MOD ]-> s_mod, // add mod edge to module scope
      s_mod -[ `LEX ]-> s,
      decls(s_mod, s_mod, ds)

  | DeclImport(r) ->
      {p, x, s_mod}
      mod-ref(s_lookup, r, p),
      datumOf(p, (x, s_mod)), // what does the expected form for the datum translate to? `datumMod(x, s_mod)`?
      s -[ `IMP ]-> s_mod     // ^ and how do we know which AG production to match on?

  | DeclDef(b) ->
      par-bind(s, b, s_modparent)

  }.



syntax:
expr(inh: s, e, syn: ty) :- e match {

    ExprInt(_) ->
      ty := INT()

  | ExprTrue() ->
      ty := BOOL()

  | ExprFalse() ->
      ty := BOOL()

  | ExprVar(r) ->
      {p, x}
      var-ref(s, r, p),
      datumOf(p, (x, ty))  // what does the expected form for the datum translate to? `datumVar(x, ty)`?
                           // ^ and how do we know which AG production to match on?

  | ExprAdd(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == INT(),
      ty2 == INT(),
      ty := INT()

  | ExprSub(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == INT(),
      ty2 == INT(),
      ty := INT()

  | ExprMul(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == INT(),
      ty2 == INT(),
      ty := INT()

  | ExprDiv(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == INT(),
      ty2 == INT(),
      ty := INT()

  | ExprAnd(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == BOOL(),
      ty2 == BOOL(),
      ty := BOOL()

  | ExprOr(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == BOOL(),
      ty2 == BOOL(),
      ty := BOOL()

  | ExprEq(e1, e2) ->
      {ty1 ty2}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      ty1 == ty2,
      ty := BOOL()

  | ExprApp(e1, e2) ->
      {tyF ty1 ty2 ty3}
      expr(s, e1, tyF),
      expr(s, e2, ty3),
      tyF == FUN(ty1, ty2), // interesting case with unification, can translate to binding of locals based on matching
      ty1 == ty3,
      ty := ty2


  | ExprIf(e1, e2, e3) ->
      {ty1 ty2 ty3}
      expr(s, e1, ty1),
      expr(s, e2, ty2),
      expr(s, e3, ty3),
      ty1 := BOOL(),
      ty2 == ty3,
      ty := ty2

  | ExprFun(d, e) ->
      {s_fun, ty1, ty2}
      new s_fun,
      s_fun -[ `LEX ]-> s,
      arg-decl(s_fun, d, ty1),
      expr(s_fun, e, ty2),
      ty := FUN(ty1, ty2)

  | ExprLet(bs, e) ->
      {s_let}
      new s_let,
      seq-binds(s, bs, s_let),
      expr(s_let, e, ty)

  | ExprLetRec(bs, e) ->
      {s_let}
      new s_let,
      s_let -[ `LEX ]-> s,
      par-binds(s_let, bs, s_let),
      expr(s_let, e, ty)

  | ExprLetPar(bs, e) ->
      {s_let}
      new s_let,
      s_let -[ `LEX ]-> s,
      par-binds(s, bs, s_let),
      expr(s_let, e, ty)

  }.



syntax:
seq-binds(inh: s, bs, inh: s_def) :- bs match {
    
    SeqBindsNil()   ->
        s_def -[ `LEX ]-> s
        
  | SeqBindsOne(b) ->
        s_def -[ `LEX ]-> s,
        seq-bind(s, b, s_def)

  | SeqBindsCons(b, bs) ->
        {s_def'}
        new s_def',
        s_def' -[ `LEX ]-> s,
        seq-bind(s, b, s_def'),
        seq-binds(s_def', bs, s_def)

}.



syntax:
seq-bind(inh: s, b, inh: s_def) :- b match {
    
    DefBind(x, e) ->
        {s_var, ty}
        new s_var -> (x, ty),
        s_def -[ `VAR ]-> s_var,
        expr(s, e, ty)
  
  | DefBindTyped(x, tyann, e) ->
        {s_var, ty1, ty2}
        new s_var -> (x, ty1),
        s_def -[ `VAR ]-> s_var,
        type(s, tyann, ty1),
        expr(s, e, ty2),
        ty1 == ty2

}.



syntax:
par-binds(inh: s, bs, inh: s_def) :- bs match {
    
    ParBindsNil() ->
        true
  
  | ParBindsCons(b, bs) ->
        par-bind(s, b, s_def),
        par-binds(s, bs, s_def)
  
}.



syntax:
par-bind(inh: s, b, inh: s_def) :- b match {

    DefBind(x, e) ->
        {s_var, ty}
        new s_var -> (x, ty),
        s_def -[ `VAR ]-> s_var,
        expr(s, e, ty)
  
  | DefBindTyped(x, tyann, e) ->
        {s_var, ty}
        new s_var -> (x, ty),
        s_def -[ `VAR ]-> s_var,
        type(s, tyann, ty),
        expr(s, e, ty)

}.



arg-decl(inh: s, d, syn: ty) :- d match {

    ArgDecl(x, tyann) ->
        {s_var, ty1}
        type(s, tyann, ty1),
        new s_var -> (x, ty1),
        s -[ `VAR ]-> s_var,
        ty := ty1

}.



syntax:
type(inh: s, tyann, syn: ty) :- tyann match {
    
    TInt() ->
        ty := INT()
  
  | TBool() ->
        ty := BOOL()
  
  | TArrow(tyann1, tyann2) ->
        {ty1, ty2}
        type(s, tyann1, ty1),
        type(s, tyann2, ty2),
        ty := FUN(ty1, ty2)

}.



syntax:
mod-ref(inh: s, r, syn: p) :- r match {
    
    ModRef(x) ->
        {mods, xmods, xmods'}
        query s `LEX*`IMP? `MOD as mods,
        filter mods((x', _) where x' == x) xmods,
        min-refs(xmods, xmods'),
        only(xmods', p)

  | ModQRef(r, x) ->
        {p_mod, s_mod, mods, xmods}
        mod-ref(s, r, p_mod),
        tgt(p_mod, s_mod),
        query s_mod `MOD as mods,
        filter mods((x', _) where x' == x) xmods,
        only(xmods, p)
}.



syntax:
var-ref(inh: s, r, syn: p) :- r match {

    VarRef(x) ->
        {vars, xvars, xvars'}
        query s `LEX*(`EXT*|`IMP?) `VAR as vars,
        filter vars((x', _) where x' == x) xvars,
        min-refs(xvars, xvars'),
        only(xvars', p)

  | VarQRef(r, x) ->
        {p_mod, s_mod, vars, xvars}
        mod-ref(s, r, p_mod),
        tgt(p_mod, s_mod),
        query s_mod `VAR as vars,
        filter vars((x', _) where x' == x) xvars,
        only(xvars, p)

}.



min-refs(z, z') :-
  min z lexico( `MOD < `LEX, `MOD < `IMP,
                `VAR < `LEX, `VAR < `IMP,
                `IMP < `LEX
              ) z'.