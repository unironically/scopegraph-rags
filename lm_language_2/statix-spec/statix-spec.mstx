import statixlib.paths
import statixlib.sets



main(p) :- p match {

    Program(ds):[] ->
        {s}
        new s,
        decls(s, s, ds)
    
}.



// s:        lexical scope
// s_mod:    outer scope of module

decls(s, s_mod, ds) :- ds match {
  
    DeclsNil() ->
        true
  
  | DeclsCons(d, ds) ->
        {s_next}
        new s_next,
        s_next -[ `LEX ]-> s,
        decl(s_next, s, s_mod, d),
        decls(s_next, s_mod, ds)

}.



// s:        lexical scope
// s_lookup: lookup scope (prev. lexical)
// s_mod:    outer scope of module

decl(s, s_lookup, s_mod, d) :- d match {
    
    DeclModule(x, ds) ->
        {s_mod}                   // shadows arg s_mod
        new s_mod -> (x, s_mod),
        s -[ `MOD ]-> s_mod,
        s_mod -[ `LEX ]-> s,
        decls(s_mod, s_mod, ds)

  | DeclImport(r) ->
        {p, x, s_mod'}
        mod-ref(s_lookup, r, p),
        datum(p, (x, s_mod')),
        s -[ `IMP ]-> s_mod'

  | DeclDef(b) ->
        par-bind(s, b, s_modparent)

}.



expr(s, e, ty) :- e match {

    ExprInt(_) ->
      ty := INT()

  | ExprTrue() ->
      ty := BOOL()

  | ExprFalse() ->
      ty := BOOL()

  | ExprVar(r) ->
      {p, x}
        var-ref(s, r, p),
        datum(p, (x, ty))

  | ExprAdd(e1, e2) ->
      {t1, t2}
        expr(s, e1, t1),
        expr(s, e2, t2),
        t1 == t2,
        ty := INT()

  | ExprAnd(e1, e2) ->
      {t1, t2}
        expr(s, e1, t1),
        expr(s, e2, t2),
        t1 == t2,
        ty := BOOL()

  | ExprEq(e1, e2) ->
      {t1, t2}
        expr(s, e1, t1),
        expr(s, e2, t2),
        t1 == t2,
        ty := BOOL()

  | ExprApp(e1, e2) ->
      {t1, t2, t3}
        expr(s, e1, FUN(t1, t2)),
        expr(s, e2, t3),
        t3 == t1,
        ty := t2

  | ExprIf(e1, e2, e3) ->
      {t1, t2, t3}
        expr(s, e1, t1),
        expr(s, e2, t2),
        expr(s, e3, t3),
        t1 == BOOL(),
        t2 == t3,
        ty := t2

  | ExprFun(d, e) ->
      {s_fun, t1, t2}
        new s_fun,
        s_fun -[ `LEX ]-> s,
        arg-decl(s_fun, d, t1),
        expr(s_fun, e, t2),
        ty := FUN(t1, t2)

  | ExprLet(bs, e) ->
      {s_let, t1}
        new s_let,
        seq-binds(s, bs, s_let),
        expr(s_let, e, t1),
        ty := t1

  | ExprLetRec(bs, e) ->
      {s_let, t1}
        new s_let,
        s_let -[ `LEX ]-> s,
        par-binds(s_let, bs, s_let),
        expr(s_let, e, t1),
        ty := t1

  | ExprLetPar(bs, e) ->
      {s_let, t1}
        new s_let,
        s_let -[ `LEX ]-> s,
        par-binds(s, bs, s_let),
        expr(s_let, e, t1),
        ty := t1

  }.



seq-binds(s, bs, s_def) :- bs match {
    
    SeqBindsNil()   ->
        s_def -[ `LEX ]-> s
        
  | SeqBindsOne(b) ->
        s_def -[ `LEX ]-> s,
        seq-bind(s, b, s_def)

  | SeqBindsCons(b, bs) ->
        {s_def'}
            new s_def',
            s_def' -[ `LEX ]-> s,
            seq-bind(s, b, s_def'),
            seq-binds(s_def', bs, s_def)

}.



seq-bind(s, b, s_def) :- b match {
    
    DefBind(x, e) ->
        {s_var, t1, t2}
            new s_var -> (x, t1),
            s_def -[ `VAR ]-> s_var,
            expr(s, e, t2),
            t1 := t2
  
  | DefBindTyped(x, tyann, e) ->
        {s_var, t1, t2, t3}
            new s_var -> (x, t1),
            s_def -[ `VAR ]-> s_var,
            type(s, tyann, t2),
            expr(s, e, t3),
            t1 := t2,
            t2 == t3

}.



par-binds(s, bs, s_def) :- bs match {
    
    ParBindsNil() ->
        true
  
  | ParBindsCons(b, bs) ->
        par-bind(s, b, s_def),
        par-binds(s, bs, s_def)
  
}.



par-bind(s, b, s_def) :- b match {

    DefBind(x, e) ->
        {s_var, t1, t2}
            new s_var -> (x, t1),
            s_def -[ `VAR ]-> s_var,
            expr(s, e, t2),
            t1 := t2
  
  | DefBindTyped(x, tyann, e) ->
        {s_var, t1, t2, t3}
            new s_var -> (x, t1),
            s_def -[ `VAR ]-> s_var,
            type(s, tyann, t2),
            expr(s, e, t3),
            t1 := t2,
            t2 == t3

}.



arg-decl(s, d, ty) :- d match {

    ArgDecl(x, tyann) ->
        {s_var, t1}
            type(s, tyann, t1),
            new s_var -> (x, t2),
            s -[ `VAR ]-> s_var,
            t1 == t2,
            ty := t1

}.



type(s, tyann, ty) :- tyann match {
    
    TInt() ->
        ty := INT()
  
  | TBool() ->
        ty := BOOL()
  
  | TArrow(tyann1, tyann2) ->
        {t1, t2}
            type(s, tyann1, t1),
            type(s, tyann2, t2),
            ty := FUN(t1, t2)

}.



mod-ref(s, r, p) :- r match {
    
    ModRef(x) ->
        {mods, xmods, xmods'}
            query s `LEX*`IMP? `MOD as mods,
            filter mods((x', _) where x' == x) xmods,
            min-refs(xmods, xmods'),
            only(xmods', p)

  | ModQRef(r, x) ->
        {p_mod, s_mod, mods, xmods}
            mod-ref(s, r, p_mod),
            tgt(p_mod, s_mod),
            query s_mod `MOD as mods,
            filter mods((x', _) where x' == x) xmods,
            only(xmods, p)
}.



var-ref(s, r, p) :- r match {
    
    VarRef(x) ->
        {vars, xvars, xvars'}
            query s `LEX*(`EXT*|`IMP?) `VAR as vars,
            filter vars((x', _) where x' == x) xvars,
            min-refs(xvars, xvars'),
            only(xvars', p)

  | VarQRef(r, x) ->
        {p_mod, s_mod, vars, xvars}
            mod-ref(s, r, p_mod),
            tgt(p_mod, s_mod),
            query s_mod `VAR as vars,
            filter vars((x', _) where x' == x) xvars,
            only(xvars, p)

}.



min-refs(z, z') :-
  min z lexico( `MOD < `LEX, `MOD < `IMP,
                `VAR < `LEX, `VAR < `IMP,
                `IMP < `LEX
              ) z'.