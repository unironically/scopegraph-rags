import java.util.*;

aspect Resolution {

  /*---------- DFA ----------*/

  syn ArrayList<Result> DFA.findVisMod(Scope source, Scope current, 
                                       ArrayList<Edge> path, Ref ref);

  eq DFA.findVisMod(Scope source, Scope current, 
                    ArrayList<Edge> path, Ref ref) = 
    getStart().findVisMod(source, current, path, ref);


  /*---------- State ----------*/

  syn ArrayList<Result> State.findVisMod(Scope source, Scope current, 
                                         ArrayList<Edge> path, Ref ref);
  
  eq State.findVisMod(Scope source, Scope current, 
                      ArrayList<Edge> path, Ref ref) {
    
    ArrayList<Result> res = new ArrayList<Result>();

    /* MOD */

    for (Scope s: current.getMod()) {
      ArrayList<Edge> newPath = new ArrayList<Edge>(path);
      newPath.add(new Edge(current, "MOD", s));
      res.addAll(getModTrans().findVisMod(source, s, newPath, ref));
    }
    if (!res.isEmpty()) return res;

    /* IMP */

    for (Scope s: current.equals(source) ? current.impTentative() :
                                           current.imp()) {
      ArrayList<Edge> newPath = new ArrayList<Edge>(path);
      newPath.add(new Edge(current, "IMP", s));
      res.addAll(getImpTrans().findVisMod(source, s, newPath, ref));
    }
    if (!res.isEmpty()) return res;

    /* LEX */

    if (current.getLex().numChildren() != 0) {
      ArrayList<Edge> newPath = new ArrayList<Edge>(path);
      newPath.add(new Edge(current, "LEX", 
                           (Scope) current.getLex().getChild(0)));
      res.addAll(getLexTrans().findVisMod(source, 
                                          (Scope) current.getLex().getChild(0), 
                                          newPath, ref));
    }
    return res;

  }

  eq FinalState.findVisMod(Scope source, Scope current, 
                        ArrayList<Edge> path, Ref ref) {

    ArrayList<Result> res = new ArrayList<Result>();

    if (current instanceof ScopeDatum && 
        ((ScopeDatum)current).getDatum().getId().equals(ref.getId())) {
      res.add(new Result(ref, path, new Edge(source, "RES", current)));
    }

    return res;

  }


  eq SinkState.findVisMod(Scope source, Scope current, 
                          ArrayList<Edge> path, Ref ref) {
    return new ArrayList<Result>();
  }


  /*---------- Ref ----------*/

  syn lazy ArrayList<Result> Ref.result();

  eq Ref.result() {
    return getDFA().findVisMod(getScope(), getScope(),
                               new ArrayList<Edge>(), this);
  }

}


/*try {
      Thread.sleep(1000);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
    }*/