import java.util.*;

aspect Resolution {

  /*---------- DFA ----------*/

  syn ArrayList<Scope> DFA.decls(Ref ref, Scope current);

  eq DFA.decls(Ref ref, Scope current) = lexState().decls(ref, current);

  syn State DFA.lexState();
  syn State DFA.impState();
  syn FinalState DFA.finalState();
  syn SinkState DFA.sinkState();

  eq DFA.finalState() { FinalState fin = new FinalState();
                        fin.setParent(this); return fin; }

    eq DFA.sinkState()  { SinkState snk = new SinkState();
                        snk.setParent(this); return snk; }

  eq DFA.finalState().lexT() { return this.sinkState(); }
  eq DFA.finalState().impT() { return this.sinkState(); }
  eq DFA.finalState().varT() { return this.sinkState(); }
  eq DFA.finalState().modT() { return this.sinkState(); }

  eq DFA.sinkState().lexT() { return this.sinkState(); }
  eq DFA.sinkState().impT() { return this.sinkState(); }
  eq DFA.sinkState().varT() { return this.sinkState(); }
  eq DFA.sinkState().modT() { return this.sinkState(); }

  /*---------- VarDFA ----------*/

  syn State VarDFA.lexState();
  syn State VarDFA.impState();

  eq VarDFA.lexState() { State lex = new State();
                         lex.setParent(this); return lex; }
  eq VarDFA.impState() { State imp = new State();
                         imp.setParent(this); return imp; }
  
  eq VarDFA.lexState().lexT() { return this.lexState(); }
  eq VarDFA.lexState().impT() { return this.impState(); }
  eq VarDFA.lexState().varT() { return this.finalState(); }
  eq VarDFA.lexState().modT() { return this.sinkState(); }

  eq VarDFA.impState().lexT() { return this.sinkState(); }
  eq VarDFA.impState().impT() { return this.sinkState(); }
  eq VarDFA.impState().varT() { return this.finalState(); }
  eq VarDFA.impState().modT() { return this.sinkState(); }

  /*---------- ModDFA ----------*/

  syn State ModDFA.lexState();
  syn State ModDFA.impState();

  eq ModDFA.lexState() { State lex = new ModState();
                         lex.setParent(this); return lex; }
  eq ModDFA.impState() { State imp = new ModState();
                         imp.setParent(this); return imp; }

  eq ModDFA.lexState().lexT() { return this.lexState(); }
  eq ModDFA.lexState().impT() { return this.impState(); }
  eq ModDFA.lexState().varT() { return this.sinkState(); }
  eq ModDFA.lexState().modT() { return this.finalState(); }

  eq ModDFA.impState().lexT() { return this.sinkState(); }
  eq ModDFA.impState().impT() { return this.sinkState(); }
  eq ModDFA.impState().varT() { return this.sinkState(); }
  eq ModDFA.impState().modT() { return this.finalState(); }
  
  /*---------- State ----------*/

  inh State State.lexT();
  inh State State.impT();
  inh State State.varT();
  inh State State.modT();

  syn ArrayList<Scope> State.decls(Ref ref, Scope s);

  eq State.decls(Ref ref, Scope s) {
    
    ArrayList<Scope> varRes = new ArrayList<Scope>();

    for (Scope sVar: s.var()) {
      varRes.addAll(this.varT().decls(ref, sVar));
    }

    ArrayList<Scope> modRes = new ArrayList<Scope>();

    for (Scope sMod: s.mod()) {
      modRes.addAll(this.modT().decls(ref, sMod));
    }

    ArrayList<Scope> impRes = new ArrayList<Scope>();

    for (Scope sImp: s.imp()) {
      impRes.addAll(this.impT().decls(ref, sImp));
    }

    ArrayList<Scope> lexRes = new ArrayList<Scope>();

    for (Scope sLex: s.lex()) {
      lexRes.addAll(this.lexT().decls(ref, sLex));
    }

    ArrayList<Scope> allRes = new ArrayList<Scope>();

    allRes.addAll(varRes);
    allRes.addAll(modRes);
    allRes.addAll(impRes);
    allRes.addAll(lexRes);

    return allRes;

  }

  eq ModState.decls(Ref ref, Scope s) {
    
    ArrayList<Scope> varRes = new ArrayList<Scope>();

    for (Scope sVar: s.var()) {
      varRes.addAll(this.varT().decls(ref, sVar));
    }

    ArrayList<Scope> modRes = new ArrayList<Scope>();

    for (Scope sMod: s.mod()) {
      modRes.addAll(this.modT().decls(ref, sMod));
    }

    ArrayList<Scope> impTentativeRes = new ArrayList<Scope>();

    for (Scope sImpTentative: s.impTentative()) {
      impTentativeRes.addAll(this.impT().decls(ref, sImpTentative));
    }

    ArrayList<Scope> lexRes = new ArrayList<Scope>();

    for (Scope sLex: s.lex()) {
      lexRes.addAll(this.lexT().decls(ref, sLex));
    }

    ArrayList<Scope> allRes = new ArrayList<Scope>();

    allRes.addAll(varRes);
    allRes.addAll(modRes);
    allRes.addAll(impTentativeRes);
    allRes.addAll(lexRes);

    return allRes;

  }
  
  eq FinalState.decls(Ref ref, Scope s) {

    ArrayList<Scope> res = new ArrayList<Scope>();

    if (s.datum().str().equals(ref.str())) {
      res.add(s);
    }

    return res;

  }


  eq SinkState.decls(Ref ref, Scope s) {

    return new ArrayList<Scope>();

  }


  /*---------- MkVarRef ----------*/

  syn lazy ArrayList<Scope> MkVarRef.varRes();

  // top.varRes = top.dfa.decls(top, head(top.lex))
  eq MkVarRef.varRes() { return dfa().decls(this, this.lex().get(0)); }

  syn lazy DFA MkVarRef.dfa() {
    VarDFA dfa = new VarDFA();
    return dfa;
  }

  /*---------- MkModRef ----------*/

  syn ArrayList<Scope> MkModRef.modRes() circular [new ArrayList<Scope>()];

  syn lazy DFA MkModRef.dfa() {
    ModDFA dfa = new ModDFA();
    return dfa;
  }

  // top.modRes = top.dfa.decls(top, head(top.lex))
  eq MkModRef.modRes() { return dfa().decls(this, this.lex().get(0)); }

}