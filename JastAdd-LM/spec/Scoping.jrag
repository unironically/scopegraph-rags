import java.util.*;

aspect Scoping {

  syn lazy ArrayList<Edge> ASTNode.imps();
  eq ASTNode.imps() { return new ArrayList<Edge>(); }

  //eq ASTNode.impTentatives() { return new ArrayList<Edge>(); }

  syn lazy ArrayList<Edge> ASTNode.mods();
  eq ASTNode.mods() { return new ArrayList<Edge>(); }

  syn lazy ArrayList<Edge> ASTNode.vars();
  eq ASTNode.vars() { return new ArrayList<Edge>(); }

  inh lazy ArrayList<Edge> Scope.impTentative() circular [new ArrayList<Edge>()];
  inh lazy ArrayList<Edge> Scope.lex();
  inh lazy ArrayList<Edge> Scope.imp();
  inh lazy ArrayList<Edge> Scope.var();
  inh lazy ArrayList<Edge> Scope.mod();

  syn lazy ArrayList<MkVarRef> ASTNode.refs();
  eq ASTNode.refs() { return new ArrayList<MkVarRef>(); }

  syn lazy ArrayList<Scope> ASTNode.scopes();
  eq ASTNode.scopes() { return new ArrayList<Scope>(); }
  

  /*---------- Program ---------*/

  /* Program */

  // global scope
  /*syn lazy Scope Program.globalScope() {
    MkScope topScope = new MkScope ();
    topScope.setParent(this);
    return topScope;
  }*/
  syn nta lazy MkScope Program.globalScope() {
    MkScope s = new MkScope();
    this.setChild(s, 1);
    return s;
  }
  
  // passing global scope down to dcls
  eq Program.getDs().scope() { return globalScope(); }

  // global scope edges
  eq Program.globalScope().lex() { return new ArrayList<Edge>(); }
  eq Program.globalScope().imp() { return globalScope().impTentative(); }
  eq Program.globalScope().var() { return getDs().vars(); }
  eq Program.globalScope().mod() { return getDs().mods(); }
  eq Program.globalScope().impTentative() { 
    ArrayList<Edge> impTentativeEdges = new ArrayList<Edge>();
    for (Resolution res: getDs().impTentatives()) {
      ImpTentEdge impTentativeEdge = new ImpTentEdge();
      ASTNode tmpPar = res.getpathNoTransform().tgt().getParent();
      impTentativeEdge.setsrc(this.globalScope());
      impTentativeEdge.settgt(res.getpathNoTransform().tgt());
      impTentativeEdges.add(impTentativeEdge);

      res.getpathNoTransform().tgt().setParent(tmpPar);
      this.globalScope().setParent(this);

    }
    return impTentativeEdges;
  }

  eq Program.refs() = getDs().refs();

  eq Program.scopes() {
    ArrayList<Scope> ss = new ArrayList<Scope>();
    ss.add(globalScope());
    ss.addAll(getDs().scopes());
    return ss;
  }

  /*---------- Decls ----------*/

  inh lazy Scope Decls.scope();

  eq Decls.getChild(int i).scope() { return scope(); }

  eq DeclsCons.refs() {
    ArrayList<MkVarRef> bnds = new ArrayList<MkVarRef>();
    bnds.addAll(getD().refs());
    bnds.addAll(getDs().refs());
    return bnds;
  }

  eq DeclsCons.scopes() {
    ArrayList<Scope> bnds = new ArrayList<Scope>();
    bnds.addAll(getD().scopes());
    bnds.addAll(getDs().scopes());
    return bnds;
  }

  eq DeclsCons.vars() {
    ArrayList<Edge> comb = new ArrayList<Edge>();
    comb.addAll(getD().vars());
    comb.addAll(getDs().vars());
    return comb;
  }

  eq DeclsCons.mods() {
    ArrayList<Edge> comb = new ArrayList<Edge>();
    comb.addAll(getD().mods());
    comb.addAll(getDs().mods());
    return comb;
  }

  syn lazy ArrayList<Resolution> Decls.impTentatives() circular [new ArrayList<Resolution>()];

  eq DeclsCons.impTentatives() {
    ArrayList<Resolution> impTs = new ArrayList<Resolution>();
    impTs.addAll(getD().impTentatives());
    impTs.addAll(getDs().impTentatives());
    return impTs;
  }

  eq DeclsNil.impTentatives() = new ArrayList<Resolution>();


  /*---------- Module Decl ----------*/

  syn lazy ArrayList<Resolution> Decl.impTentatives() circular [new ArrayList<Resolution>()];

  inh lazy Scope Decl.scope();
  
  // module scope
  /*syn lazy Scope ModuleDecl.modScope() {
    MkScopeMod modScope = new MkScopeMod (getId());
    modScope.setParent(this);
    return modScope;
  }*/
  syn nta lazy MkScopeMod ModuleDecl.modScope() {
    MkScopeMod s = new MkScopeMod(getId());
    this.setChild(s, 1);
    return s;
  }

  // module scope edges
  eq ModuleDecl.modScope().lex() {
    ArrayList<Edge> lexEdges = new ArrayList<Edge>();
    LexEdge lexEdge = new LexEdge();
    ASTNode tmpPar = this.scope().getParent();
    lexEdge.setsrc(this.modScope());
    lexEdge.settgt(this.scope());
    lexEdges.add(lexEdge);

    this.scope().setParent(tmpPar);
    this.modScope().setParent(this);

    return lexEdges;
  }
  

  eq ModuleDecl.modScope().imp() {

    ArrayList<Edge> impEdges = new ArrayList<Edge>();
    ArrayList<Resolution> ress = getDs().impTentatives();

    ArrayList<String> modRefs = new ArrayList<String>();
    modRefs.add("A");
    modRefs.add("B");

    for (String modRef: modRefs) {

      Path min = null;

      for (Resolution res: ress) {

        if (!res.getrefNoTransform().str().equals(modRef)) continue;

        Path resPath = res.getpathNoTransform();
        //ImpTentEdge impTentativeEdge = new ImpTentEdge();
        //ASTNode tmpPar = resPath.tgt().getParent();

        //impTentativeEdge.setsrc(this.modScope());
        //impTentativeEdge.settgt(resPath.tgt());

        //resPath.tgt().setParent(tmpPar);
        //this.modScope().setParent(this);

        //impTentativeEdges.add(impTentativeEdge);

        if (min != null) min = Path.min(min, resPath);
        else min = resPath;
      }

      if (min == null) return impEdges;

      ImpTentEdge impTentativeEdge = new ImpTentEdge();
      ASTNode tmpPar = min.tgt().getParent();

      impTentativeEdge.setsrc(this.modScope());
      impTentativeEdge.settgt(min.tgt());

      min.tgt().setParent(tmpPar);
      this.modScope().setParent(this);

      impEdges.add(impTentativeEdge);

    }

    return impEdges;
  }


  eq ModuleDecl.modScope().var() { return getDs().vars(); }
  eq ModuleDecl.modScope().mod() { return getDs().mods(); }
  
  eq ModuleDecl.modScope().impTentative() {
    ArrayList<Edge> impTentativeEdges = new ArrayList<Edge>();
    for (Resolution res: getDs().impTentatives()) {
      ImpTentEdge impTentativeEdge = new ImpTentEdge();
      ASTNode tmpPar = res.getpathNoTransform().tgt().getParent();
      impTentativeEdge.setsrc(this.modScope());
      impTentativeEdge.settgt(res.getpathNoTransform().tgt());

      res.getpathNoTransform().tgt().setParent(tmpPar);
      this.modScope().setParent(this);

      impTentativeEdges.add(impTentativeEdge);
    }
    return impTentativeEdges;
  }

  // Ds.scope = top.modScope
  eq ModuleDecl.getDs().scope() { return modScope(); }

  eq ModuleDecl.mods() { ArrayList<Edge> modEdges = new ArrayList<Edge>(); 
                         ModEdge modEdge = new ModEdge();
                         ASTNode tmpPar = this.scope().getParent();
                         modEdge.setsrc(this.scope());
                         modEdge.settgt(this.modScope());
                         modEdges.add(modEdge); 

                        this.scope().setParent(tmpPar);
                        this.modScope().setParent(this);

                         return modEdges; }

  eq ModuleDecl.impTentatives() = new ArrayList<Resolution>();

  eq ModuleDecl.refs() = getDs().refs();

  eq ModuleDecl.scopes() {
    ArrayList<Scope> ss = new ArrayList<Scope>();
    ss.add(modScope());
    ss.addAll(getDs().scopes());
    return ss;
  }

  /*---------- Import Decl ----------*/

  // Ds.scope = top.scope
  eq ImportDecl.getRef().scope() { return scope(); }

  // top.impTentatives = Ref.impTentatives
  eq ImportDecl.impTentatives() { return getRef().impTentatives(); }

  eq ImportDecl.refs() = getRef().refs();

  eq ImportDecl.scopes() = getRef().scopes();


  /*---------- Def Decl ----------*/

  // Bind.scope = top.scope
  eq DefDecl.getBind().scope() { return scope(); }

  // top.vars = Bind.vars
  eq DefDecl.vars() { return getBind().vars(); }

  eq DefDecl.impTentatives() = new ArrayList<Resolution>();

  eq DefDecl.refs() = getBind().refs();

  eq DefDecl.scopes() = getBind().scopes();


  /*---------- Expr ----------*/

  inh lazy Scope Expr.scope();

  // Ref.scope = top.scope
  eq VarExpr.getRef().scope() { return scope(); }

  eq Expr.refs() {
    ArrayList<MkVarRef> refsRet = new ArrayList<MkVarRef>();
    for (int i = 0; i < this.getNumChildNoTransform(); i++) {
      refsRet.addAll(this.getChild(i).refs());
    }
    return refsRet;
  }


  /*---------- ParBind ----------*/

  inh lazy Scope ParBind.scope();

  // var scope
  /*syn lazy Scope ParBind.varScope() {
    MkScopeVar varScope = new MkScopeVar (getId(), getType());
    varScope.setParent(this);
    return varScope;
  }*/
  syn nta lazy MkScopeVar ParBind.varScope() {
    MkScopeVar s = new MkScopeVar(getId(), getType());
    this.setChild(s, 2);
    return s;
  } 

  // var scope edges
  eq ParBind.varScope().lex() { return new ArrayList<Edge>(); }
  eq ParBind.varScope().imp() { return new ArrayList<Edge>(); }
  eq ParBind.varScope().var() { return new ArrayList<Edge>(); }
  eq ParBind.varScope().mod() { return new ArrayList<Edge>(); }
  eq ParBind.varScope().impTentative() { return new ArrayList<Edge>(); }

  // top.vars = [varScope]
  /*eq ParBind.vars() { ArrayList<Scope> varLst = new ArrayList<Scope>();
                      varLst.add(varScope()); return varLst; }*/
  eq ParBind.vars () {
    ArrayList<Edge> varEdges = new ArrayList<Edge>();
    VarEdge varEdge = new VarEdge();
    ASTNode tmpPar = this.scope().getParent();
    varEdge.setsrc(this.scope());
    varEdge.settgt(this.varScope());
    varEdges.add(varEdge);

    this.scope().setParent(tmpPar);
    this.varScope().setParent(this);

    return varEdges;
  }

  eq ParBind.refs() = getExpr().refs();

  eq ParBind.scopes() {
    ArrayList<Scope> ss = new ArrayList<Scope>();
    ss.add(varScope());
    return ss;
  }
  

  /*---------- VarRef ----------*/

  inh lazy Scope VarRef.scope();

  syn nta lazy MkVarRef VarRef.r() {
    MkVarRef r = new MkVarRef(getId());
    this.setChild(r, 0);
    return r;
  }

  // r.lex = [top.scope]
  eq VarRef.r().lex() { ArrayList<Edge> lexEdges = new ArrayList<Edge>();
                        LexEdgeRef lexEdge = new LexEdgeRef();
                        ASTNode tmpPar = this.scope().getParent();
                        lexEdge.setsrc(this.r());
                        lexEdge.settgt(this.scope());
                        lexEdges.add(lexEdge);

                        this.scope().setParent(tmpPar);
                        this.r().setParent(this);

                        return lexEdges; }

  eq VarRef.refs() {
    ArrayList<MkVarRef> refsRet = new ArrayList<MkVarRef>();
    refsRet.add(this.r());
    return refsRet;
  }

  /*---------- ModRef ----------*/

  syn lazy ArrayList<Resolution> ModRef.impTentatives() circular [new ArrayList<Resolution>()];

  inh lazy Scope ModRef.scope();

  // top.r = mkModRef(id)
  syn nta lazy MkModRef ModRef.r() {
    MkModRef r = new MkModRef(getId());
    this.setChild(r, 0);
    return r;
  }

  // r.lex = [top.scope]
  eq ModRef.r().lex() { ArrayList<Edge> lexEdges = new ArrayList<Edge>(); 
                        LexEdgeRef lexEdge = new LexEdgeRef();
                        ASTNode tmpPar = this.scope().getParent();
                        lexEdge.setsrc(this.r());
                        lexEdge.settgt(this.scope());
                        lexEdges.add(lexEdge);

                        this.scope().setParent(tmpPar);
                        this.r().setParent(this);

                        return lexEdges; }

  // top.impTentatives = r.modRes
  eq ModRef.impTentatives() { return r().resolution(); }


  /*---------- Scope ----------*/

  syn lazy Datum Scope.datum();

  eq Scope.datum() {
    Datum dNone = new DatumNone();
    dNone.setParent(this);
    return dNone;
  }

  eq MkScopeVar.datum() {
    Datum dVar = new DatumVar(getid(), gett());
    dVar.setParent(this);
    return dVar;
  }

  eq MkScopeMod.datum() {
    Datum dMod = new DatumMod(getid());
    dMod.setParent(this);
    return dMod;
  }


  /*---------- Datum ----------*/

  syn lazy String Datum.str();

  eq Datum.str() {
    return "";
  }

  eq DatumVar.str() {
    return getid();
  }

  eq DatumMod.str() {
    return getid();
  }


  /*---------- Ref ----------*/

  inh lazy ArrayList<Edge> Ref.lex();

  syn lazy String Ref.str();

  eq Ref.str() {
    return "";
  }

  eq MkVarRef.str() {
    return getid();
  }

  eq MkModRef.str() {
    return getid();
  }

  
  /*---------- Edge ----------*/

  /*eq Edge.src().lex() { return new ArrayList<Edge>(); }
  eq Edge.src().imp() { return new ArrayList<Edge>(); }
  eq Edge.src().var() { return new ArrayList<Edge>(); }
  eq Edge.src().mod() { return new ArrayList<Edge>(); }
  eq Edge.src().impTentative() { return new ArrayList<Edge>(); }

  eq Edge.tgt().lex() { return new ArrayList<Edge>(); }
  eq Edge.tgt().imp() { return new ArrayList<Edge>(); }
  eq Edge.tgt().var() { return new ArrayList<Edge>(); }
  eq Edge.tgt().mod() { return new ArrayList<Edge>(); }
  eq Edge.tgt().impTentative() { return new ArrayList<Edge>(); }*/

}