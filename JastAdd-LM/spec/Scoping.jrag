import java.util.*;

aspect Scoping {

  syn lazy ArrayList<Scope> ASTNode.imps();
  eq ASTNode.imps() { return new ArrayList<Scope>(); }

  syn lazy ArrayList<Scope> ASTNode.impTentatives() circular [new ArrayList<Scope>()];
  eq ASTNode.impTentatives() { return new ArrayList<Scope>(); }

  syn lazy ArrayList<Scope> ASTNode.mods();
  eq ASTNode.mods() { return new ArrayList<Scope>(); }

  syn lazy ArrayList<Scope> ASTNode.vars();
  eq ASTNode.vars() { return new ArrayList<Scope>(); }

  inh lazy ArrayList<Scope> Scope.impTentative() circular [new ArrayList<Scope>()];
  inh lazy ArrayList<Scope> Scope.lex();
  inh lazy ArrayList<Scope> Scope.imp();
  inh lazy ArrayList<Scope> Scope.var();
  inh lazy ArrayList<Scope> Scope.mod();


  /*---------- Program ---------*/

  /* Program */

  syn lazy Scope Program.globalScope() {
    MkScope topScope = new MkScope ();
    topScope.setParent(this);
    return topScope;
  }
  
  // passing global scope down to dcls
  eq Program.getDs().scope() { return globalScope(); }

  // global scope edges
  eq Program.globalScope().lex() { return new ArrayList<Scope>(); }
  eq Program.globalScope().imp() { return globalScope().impTentative(); }
  eq Program.globalScope().var() { return getDs().vars(); }
  eq Program.globalScope().mod() { return getDs().mods(); }
  eq Program.globalScope().impTentative() { return getDs().impTentatives(); }


  /*---------- Decls ----------*/

  inh lazy Scope Decls.scope();

  eq Decls.getChild(int i).scope() { return scope(); }


  /*---------- Module Decl ----------*/

  inh lazy Scope Decl.scope();
  
  // module scope
  syn lazy Scope ModuleDecl.modScope() {
    MkScopeMod modScope = new MkScopeMod (getId());
    modScope.setParent(this);
    return modScope;
  }

  // module scope edges
  eq ModuleDecl.modScope().lex() {
    ArrayList<Scope> lexLst = new ArrayList<Scope>(); 
    lexLst.add(scope());
    return new ArrayList<Scope>(); 
  }
  eq ModuleDecl.modScope().imp() { return modScope().impTentative(); }
  eq ModuleDecl.modScope().var() { return getDs().vars(); }
  eq ModuleDecl.modScope().mod() { return getDs().mods(); }
  eq ModuleDecl.modScope().impTentative() { return getDs().impTentatives(); }



  // Ds.scope = top.modScope
  eq ModuleDecl.getDs().scope() {
    return modScope();
  }

  eq ModuleDecl.mods() { ArrayList<Scope> modLst = new ArrayList<Scope>(); 
                         modLst.add(modScope()); return modLst; }


  /*---------- Import Decl ----------*/

  // Ds.scope = top.scope
  eq ImportDecl.getRef().scope() { return scope(); }

  // top.impTentatives = Ref.impTentatives
  eq ImportDecl.impTentatives() { return getRef().impTentatives(); }


  /*---------- Def Decl ----------*/

  // Bind.scope = top.scope
  eq DefDecl.getBind().scope() { return scope(); }

  // top.vars = Bind.vars
  eq DefDecl.vars() { return getBind().vars(); }


  /*---------- Expr ----------*/

  inh lazy Scope Expr.scope();

  // Ref.scope = top.scope
  eq VarExpr.getRef().scope() { return scope(); }


  /*---------- ParBind ----------*/

  inh lazy Scope ParBind.scope();

  // var scope
  syn lazy Scope ParBind.varScope() {
    MkScopeVar varScope = new MkScopeVar (getId(), getType());
    varScope.setParent(this);
    return varScope;
  }

  // var scope edges
  eq ParBind.varScope().lex() { return new ArrayList<Scope>(); }
  eq ParBind.varScope().imp() { return new ArrayList<Scope>(); }
  eq ParBind.varScope().var() { return new ArrayList<Scope>(); }
  eq ParBind.varScope().mod() { return new ArrayList<Scope>(); }
  eq ParBind.varScope().impTentative() { return new ArrayList<Scope>(); }

  // top.vars = [varScope]
  eq ParBind.vars() { ArrayList<Scope> varLst = new ArrayList<Scope>();
                      varLst.add(varScope()); return varLst; }
  

  /*---------- VarRef ----------*/

  inh lazy Scope VarRef.scope();

  syn lazy MkVarRef VarRef.r();
  syn lazy ArrayList<Scope> VarRef.varRes();

  // top.r = mkVarRef(id)
  eq VarRef.r() { MkVarRef r = new MkVarRef(getId());
                  r.setParent(this); return r; }

  // r.lex = [top.scope]
  eq VarRef.r().lex() { ArrayList<Scope> lexLst = new ArrayList<Scope>(); 
                        lexLst.add(this.scope());
                        return new ArrayList<Scope>(); }

  // top.varRes = r.varRes
  eq VarRef.varRes() { ArrayList<Scope> resLst = new ArrayList<Scope>();
                       resLst.addAll(this.r().varRes());
                       return resLst; }

  /*---------- ModRef ----------*/

  inh lazy Scope ModRef.scope();

  syn lazy MkModRef ModRef.r();

  // top.r = mkModRef(id)
  eq ModRef.r() { MkModRef r = new MkModRef(getId());
                  r.setParent(this); return r; }

  // r.lex = [top.scope]
  eq ModRef.r().lex() { ArrayList<Scope> lexLst = new ArrayList<Scope>(); 
                        lexLst.add(this.scope()); return lexLst; }

  // top.impTentatives = r.modRes
  eq ModRef.impTentatives() { ArrayList<Scope> impTentLst = new ArrayList<Scope>();
                              impTentLst.addAll(this.r().modRes());
                              return impTentLst; }


  /*---------- Scope ----------*/

  syn lazy Datum Scope.datum();

  eq Scope.datum() {
    Datum dNone = new DatumNone();
    dNone.setParent(this);
    return dNone;
  }

  eq MkScopeVar.datum() {
    Datum dVar = new DatumVar(getid(), gett());
    dVar.setParent(this);
    return dVar;
  }

  eq MkScopeMod.datum() {
    Datum dMod = new DatumMod(getid());
    dMod.setParent(this);
    return dMod;
  }


  /*---------- Datum ----------*/

  syn lazy String Datum.str();

  eq Datum.str() {
    return "";
  }

  eq DatumVar.str() {
    return getid();
  }

  eq DatumMod.str() {
    return getid();
  }


  /*---------- Ref ----------*/

  inh lazy ArrayList<Scope> Ref.lex();

  syn lazy String Ref.str();

  eq Ref.str() {
    return "";
  }

  eq MkVarRef.str() {
    return getid();
  }

  eq MkModRef.str() {
    return getid();
  }

}