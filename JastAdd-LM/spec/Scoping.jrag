import java.util.*;

aspect Scoping {

  coll HashSet<Scope> Scope.lexScopes() [new HashSet<Scope>()] with add root Program;
  coll HashSet<Scope> Scope.modScopes() [new HashSet<Scope>()] with add root Program;
  coll HashSet<Scope> Scope.varScopes() [new HashSet<Scope>()] with add root Program;
  coll HashSet<Scope> Scope.impScopes() circular [new HashSet<Scope>()] with addAll root Program;


  /*---------- Program ---------*/

  /* Program */

  syn lazy Scope Program.topScope();
  eq Program.topScope() {
    Scope topScope =  new ScopeNoDatum();
    topScope.setName("GlobalScope_" + Integer.toString(Scope.scopeCount++));
    topScope.setParent(this);

    return topScope;
  }
  
  eq Program.getDs().scope() { return topScope(); }


  /*---------- Decls ----------*/

  inh lazy Scope Decls.scope();

  eq Decls.getChild(int i).scope() { return scope(); }

  /*---------- Module Decl ----------*/

  inh lazy Scope Decl.scope();

  syn lazy Scope ModuleDecl.modScope();

  eq ModuleDecl.modScope() {
    ScopeDatum s = new ScopeDatum();
    s.setName("ModScope_" + Integer.toString(Scope.scopeCount++));
    s.setParent(this);
    s.setDatum(new DatumMod(getId(), label()));
    return s;
  }

  eq ModuleDecl.getDs().scope() {
    return modScope();
  }

  ModuleDecl contributes modScope()
    to Scope.modScopes()
    for scope();

  ModuleDecl contributes scope()
    to Scope.lexScopes()
    for modScope();

  syn String ModuleDecl.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();


  /*---------- Import Decl ----------*/

  eq ImportDecl.getRef().scope() {
    return scope();
  }


  /*---------- Def Decl ----------*/

  eq DefDecl.getBind().scope() {
    return scope();
  }


  /*---------- Expr ----------*/

  inh lazy Scope Expr.scope();

  eq VarExpr.getRef().scope() { return scope(); }

  eq AddExpr.getLeft().scope() { return scope(); }
  eq AddExpr.getRight().scope() { return scope(); }

  eq AndExpr.getLeft().scope() { return scope(); }
  eq AndExpr.getRight().scope() { return scope(); }


  /*---------- ParBind ----------*/

  inh lazy Scope ParBind.scope();

  syn lazy Scope ParBind.varScope();

  eq ParBind.varScope() {
    ScopeDatum s = new ScopeDatum();
    s.setName("VarScope_" + Integer.toString(Scope.scopeCount++));
    s.setParent(this);
    s.setDatum(new DatumVar(getId(), label(), getType()));
    return s;
  }

  ParBind contributes varScope()
    to Scope.varScopes()
    for scope();

  syn String ParBind.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();
  

  /*---------- VarRef ----------*/

  inh lazy Scope VarRef.scope();

  syn lazy Ref VarRef.ref();

  eq VarRef.ref() {
    Ref r = new Ref(getId(), label(), scope(), DFA.varRefDFA());
    r.setParent(this);
    return r;
  }

  syn String VarRef.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();


  /*---------- ModRef ----------*/

  inh lazy Scope ModRef.scope();

  syn lazy Ref ModRef.ref();

  eq ModRef.ref() {
    Ref r = new Ref(getId(), label(), scope(), DFA.modRefDFA());
    r.setParent(this);
    return r;
  }

  syn String ModRef.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();


  ModRef contributes imps()
    to Scope.impScopes()
    for scope();

  syn ArrayList<Scope> ModRef.imps();
  eq ModRef.imps() {
    ArrayList<Scope> res = ref().decls();
    ArrayList<Scope> ret = new ArrayList<Scope>();

    if (!res.isEmpty())
      ret.add(res.get(0));

    return ret;
  }

}