import java.util.*;

aspect Scoping {

  syn lazy HashSet<Scope> ASTNode.mods();
    eq ASTNode.mods() { return new HashSet<Scope>(); }

  syn lazy HashSet<Scope> ASTNode.vars();
    eq ASTNode.vars() { return new HashSet<Scope>(); }

  coll ArrayList<Scope> Scope.impTentative() 
    circular [new ArrayList<Scope>()] with addAll root Program;
  
  syn lazy ArrayList<Scope> ASTNode.allScopes();
    eq ASTNode.allScopes() { return new ArrayList<Scope>(); }

  inh lazy HashSet<Scope> Scope.imp();


  /*---------- Program ---------*/

  /* Program */

  syn lazy Scope Program.getTopScope() {
    Opt<Scope> lexOpt = new Opt();
    lexOpt.setParent(this);
    ScopeNoDatum topScope = new ScopeNoDatum (
      "GlobalScope_" + Integer.toString(Scope.scopeCount++),
      lexOpt,
      getDs().mods(),
      getDs().vars()
    );
    topScope.setParent(this);
    return topScope;
  }
  
  eq Program.getDs().scope() { return getTopScope(); }

  eq Program.allScopes() {
    ArrayList<Scope> all = getDs().allScopes();
    all.add(getTopScope());
    return all;
  }

  eq Program.getTopScope().imp() {
    return new HashSet<Scope>();
  }

  /*---------- Decls ----------*/

  inh lazy Scope Decls.scope();

  eq Decls.getChild(int i).scope() { return scope(); }

  eq DeclsCons.allScopes() {
    ArrayList<Scope> all = getD().allScopes();
    all.addAll(getDs().allScopes());
    return all;
  }

  /*---------- Module Decl ----------*/

  inh lazy Scope Decl.scope();

  syn lazy Scope ModuleDecl.getModScope() {
    Opt<Scope> lexOpt = new Opt(scope());
    lexOpt.setParent(this);
    ScopeDatum modScope = new ScopeDatum (
      "ModScope_" + getId() + "_" + Integer.toString(Scope.scopeCount++),
      lexOpt,
      getDs().mods(),
      getDs().vars(),
      new DatumMod(getId(), getId() + "_" + getStartLine() + ":" +   
                            getStartColumn())
    );
    modScope.setParent(this);
    System.out.println(modScope.getName() + "'s parent is " + modScope.getParent().getClass().getSimpleName()); // removing this changes result....
    return modScope;
  }

  // Ds.scope = top.modScope
  eq ModuleDecl.getDs().scope() {
    return getModScope();
  }

  eq ModuleDecl.mods() { HashSet<Scope> mod = new HashSet<Scope>(); 
                         mod.add(getModScope()); return mod; }


  eq ModuleDecl.getModScope().imp() {
    HashSet<Scope> toImp = new HashSet<Scope>();
    for (Scope s: scope().impTentative())
      toImp.add(s);
    return toImp;
  }

  eq ModuleDecl.allScopes() {
    ArrayList<Scope> all = getDs().allScopes();
    all.add(getModScope());
    return all;
  }


  /*---------- Import Decl ----------*/

  // Ds.scope = top.scope
  eq ImportDecl.getRef().scope() {
    return scope();
  }


  /*---------- Def Decl ----------*/

  // Bind.scope = top.scope
  eq DefDecl.getBind().scope() {
    return scope();
  }

  eq DefDecl.vars() {
    return getBind().vars();
  }

  eq DefDecl.allScopes() {
    return getBind().allScopes();
  }


  /*---------- Expr ----------*/

  inh lazy Scope Expr.scope();

  // Ref.scope = top.scope
  eq VarExpr.getRef().scope() { return scope(); }


  /*---------- ParBind ----------*/

  inh lazy Scope ParBind.scope();

  syn lazy Scope ParBind.getVarScope() {
    Opt<Scope> lexOpt = new Opt();
    lexOpt.setParent(this);
    ScopeDatum varScope = new ScopeDatum (
      "VarScope_" + getId() + "_" + Integer.toString(Scope.scopeCount++),
      lexOpt,
      new HashSet<Scope>(),
      new HashSet<Scope>(),
      new DatumVar(getId(), label(), getType())
    );
    varScope.setParent(this);
    return varScope;
  }

  syn String ParBind.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();

  
  eq ParBind.vars() {
    HashSet<Scope> varSet = new HashSet<Scope>();
    varSet.add(getVarScope());
    return varSet;
  }

  eq ParBind.allScopes() {
    ArrayList<Scope> all = new ArrayList<Scope>();
    all.add(getVarScope());
    return all;
  }

  eq ParBind.getVarScope().imp() {
    return new HashSet<Scope>();
  }
  

  /*---------- VarRef ----------*/

  inh lazy Scope VarRef.scope();

  syn lazy Ref VarRef.ref();

  eq VarRef.ref() {
    Ref r = new Ref(getId(), label(), scope(), DFA.varRefDFA());
    r.setParent(this);
    return r;
  }

  syn String VarRef.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();


  /*---------- ModRef ----------*/

  inh lazy Scope ModRef.scope();

  syn lazy Ref ModRef.ref();

  eq ModRef.ref() {
    Ref r = new Ref(getId(), label(), scope(), DFA.modRefDFA());
    r.setParent(this);
    return r;
  }

  syn String ModRef.label() =
    getId() + "_" + getStartLine() + ":" + getStartColumn();


  ModRef contributes res()
                  to Scope.impTentative()
                 for scope();

  syn ArrayList<Scope> ModRef.res();

  eq ModRef.res() {
    ArrayList<Scope> toRes = new ArrayList<Scope>();
    for (Result r: ref().result()) toRes.add(r.getEdge().getTgt());
    return toRes;
  }

}