import java.util.*;

aspect Typing {

  /*---------- Program ----------*/

  syn Boolean Program.ok() = getDs().ok();


  /*---------- Decls ----------*/

  syn Boolean Decls.ok() = false;
  syn Boolean DeclsCons.ok() = getD().ok() && getDs().ok();
  syn Boolean DeclsNil.ok() = true;


  /*---------- Decl ----------*/

  syn Boolean Decl.ok() = false;
  syn Boolean ModuleDecl.ok() = getDs().ok();
  syn Boolean ImportDecl.ok() = getRef().impScope() != null;
  syn Boolean DefDecl.ok() = getBind().ok();


  /*---------- Expr ----------*/

  syn Type Expr.type();

  eq Expr.type() { return new ErrType(); }

  eq VarExpr.type() { return getRef().type(); }

  eq IntExpr.type() { return new IntType(); }

  eq BoolExpr.type() { return new BoolType(); }

  eq AddExpr.type() {
    if (getLeft().type().getClass().equals(getRight().type().getClass())) return new IntType();
    else return new ErrType();
  }


  /*---------- ParBind ----------*/

  syn Boolean ParBind.ok() = !(getExpr().type() instanceof ErrType);


  /*---------- VarRef ----------*/

  syn lazy Type VarRef.type();

  eq VarRef.type() {

    System.out.println("[!] Trying to resolve " + getId() + " from scope " + scope().getName());
    ArrayList<Scope> queryResult = ref().res();

    Scope head;

    try {
      head = queryResult.get(0);
    } catch (Exception e) { 
      System.out.println("[âœ—] Couldn't find a resolution for " + getId());
      return new ErrType();
    }

    if (head instanceof ScopeDatum && ((ScopeDatum) head).getDatum() instanceof DatumVar) { 
      return ((DatumVar) ((ScopeDatum) head).getDatum()).getType();
    } 

    return new ErrType();
  }


}