import java.util.*;

aspect Typing {

  /*---------- Program ----------*/

  syn lazy Boolean Program.ok() = getDs().ok();


  /*---------- Decls ----------*/

  syn lazy Boolean Decls.ok() = false;
  syn lazy Boolean DeclsCons.ok() = getD().ok() && getDs().ok();
  syn lazy Boolean DeclsNil.ok() = true;


  /*---------- Decl ----------*/

  syn lazy Boolean Decl.ok() = false;
  syn lazy Boolean ModuleDecl.ok() = getDs().ok();
  syn lazy Boolean ImportDecl.ok() = !getRef().impScopes().isEmpty();
  syn lazy Boolean DefDecl.ok() = getBind().ok();


  /*---------- Expr ----------*/

  syn lazy Type Expr.type() circular [new ErrType()];

  eq Expr.type() { return Type.errType; }

  eq VarExpr.type() { return getRef().type(); }

  eq IntExpr.type() { return Type.intType; }
  eq BoolExpr.type() { return Type.boolType; }

  eq AddExpr.type() {
    if (getLeft().type() instanceof IntType && getRight().type() instanceof IntType) 
      return Type.intType;
    return Type.errType;
  }


  /*---------- ParBind ----------*/

  syn lazy Boolean ParBind.ok();

  eq ParBind.ok() {
    if (getType() instanceof ErrType)
      return !(getExpr().type() instanceof ErrType);
    return getExpr().type().getClass().equals(getType().getClass());
  }

  /*---------- VarRef ----------*/

  syn lazy Type VarRef.type();

  eq VarRef.type() {

    ArrayList<Scope> queryResult = ref().res();

    Scope head;

    try {
      head = queryResult.get(0);
    } catch (Exception e) { 
      return new ErrType();
    }

    if (head instanceof ScopeDatum && ((ScopeDatum) head).getDatum() instanceof DatumVar) { 
      return ((DatumVar) ((ScopeDatum) head).getDatum()).getType();
    } 

    return new ErrType();
  }


}