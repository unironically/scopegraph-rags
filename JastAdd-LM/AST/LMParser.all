
%header {:
package AST;
import AST.*;
:};

%embed {:
  class Events extends Parser.Events {
    public void syntaxError(Symbol token) {
      StringBuffer s = new StringBuffer();
      s.append(token.getLine(token.getStart()) + ", " + token.getColumn(token.getStart()) + "\n");
      s.append("  *** Syntactic error: unexpected token " + Terminals.NAMES[token.getId()]);
      throw new Error(s.toString());
    }
    public void scannerError(Scanner.Exception e) {
      StringBuffer s = new StringBuffer();
      s.append(e.line + ", " + e.column + "\n");
      s.append("  *** Lexical error: " + e.getMessage());
      throw new Error(s.toString());
    }
  }
  { report = new Events(); } // Use error handler in parser
:};

%goal goal;
Program goal =
  decls                                     {: return new Program(decls); :}
  ;


Decls decls =
                                            {: return new DeclsNil(); :}
  | decl decls                              {: return new DeclsCons(decl, decls); :}
  ;


Decl decl =
    MODULE IDENTIFIER LBRACE decls RBRACE   {: return new ModuleDecl(IDENTIFIER, decls); :}
  | IMPORT mod_ref                          {: return new ImportDecl(mod_ref); :}
  | DEF par_bind                            {: return new DefDecl(par_bind); :}
  ;


Expr expr =
    var_ref                                 {: return new VarExpr(var_ref); :}
  | INTEGER                                 {: return new IntExpr(Integer.valueOf(INTEGER)); :}
  | TRUE                                    {: return new BoolExpr(true); :}
  | FALSE                                   {: return new BoolExpr(false); :}
  | expr.a PLUS expr.b                      {: return new AddExpr(a, b); :}
  ;

Type type =
    INTTY                                   {: return new IntType(); :}
  | BOOLTY                                  {: return new BoolType(); :}
  ;

ParBind par_bind =
    IDENTIFIER COLON type ASSIGN expr                  {: return new ParBind(IDENTIFIER, new IntType(), expr); :}
  ;


ModRef mod_ref = 
    IDENTIFIER                              {: return new ModRef(IDENTIFIER); :}
  ;


VarRef var_ref = 
    IDENTIFIER                              {: return new VarRef(IDENTIFIER); :}
  ;