%header {: // Generated from /home/luke/Academia/melt/downstreams/scopegraph-rags/JastAdd-LM/AST/LMParser.all
package AST;
import AST.*; :};
%embed {: // Generated from /home/luke/Academia/melt/downstreams/scopegraph-rags/JastAdd-LM/AST/LMParser.all
class Events extends Parser.Events {
    public void syntaxError(Symbol token) {
      StringBuffer s = new StringBuffer();
      s.append(token.getLine(token.getStart()) + ", " + token.getColumn(token.getStart()) + "\n");
      s.append("  *** Syntactic error: unexpected token " + Terminals.NAMES[token.getId()]);
      throw new Error(s.toString());
    }
    public void scannerError(Scanner.Exception e) {
      StringBuffer s = new StringBuffer();
      s.append(e.line + ", " + e.column + "\n");
      s.append("  *** Lexical error: " + e.getMessage());
      throw new Error(s.toString());
    }
  }
  { report = new Events(); } // Use error handler in parser :};
%terminals MODULE;
%terminals IDENTIFIER;
%terminals LBRACE;
%terminals RBRACE;
%terminals IMPORT;
%terminals DEF;
%terminals INTEGER;
%terminals TRUE;
%terminals FALSE;
%terminals PLUS;
%terminals INTTY;
%terminals BOOLTY;
%terminals COLON;
%terminals ASSIGN;
%typeof goal = "Program";
%typeof var_ref = "VarRef";
%typeof decl = "Decl";
%typeof decls = "Decls";
%typeof mod_ref = "ModRef";
%typeof expr = "Expr";
%typeof par_bind = "ParBind";
%typeof type = "Type";
%goal goal;
goal =
    decls.decls {: ASTNode _node_ = new Program(decls);
        _node_.setStart(Symbol.getLine(_symbol_decls.getStart()), (short) Symbol.getColumn(_symbol_decls.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_decls.getEnd()), (short) Symbol.getColumn(_symbol_decls.getEnd()));
        return new Symbol(_node_); :}
  ;
decls =
    {: return new Symbol(new DeclsNil()); :}

  | decl.decl decls.decls {: ASTNode _node_ = new DeclsCons(decl, decls);
        _node_.setStart(Symbol.getLine(_symbol_decl.getStart()), (short) Symbol.getColumn(_symbol_decl.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_decls.getEnd()), (short) Symbol.getColumn(_symbol_decls.getEnd()));
        return new Symbol(_node_); :}
  ;
decl =
    MODULE.MODULE IDENTIFIER.IDENTIFIER LBRACE.LBRACE decls.decls RBRACE.RBRACE {: ASTNode _node_ = new ModuleDecl(((String)IDENTIFIER.value), decls);
        _node_.setStart(Symbol.getLine(MODULE.getStart()), (short) Symbol.getColumn(MODULE.getStart()));
        _node_.setEnd(Symbol.getLine(RBRACE.getEnd()), (short) Symbol.getColumn(RBRACE.getEnd()));
        return new Symbol(_node_); :}

  | IMPORT.IMPORT mod_ref.mod_ref {: ASTNode _node_ = new ImportDecl(mod_ref);
        _node_.setStart(Symbol.getLine(IMPORT.getStart()), (short) Symbol.getColumn(IMPORT.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_mod_ref.getEnd()), (short) Symbol.getColumn(_symbol_mod_ref.getEnd()));
        return new Symbol(_node_); :}

  | DEF.DEF par_bind.par_bind {: ASTNode _node_ = new DefDecl(par_bind);
        _node_.setStart(Symbol.getLine(DEF.getStart()), (short) Symbol.getColumn(DEF.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_par_bind.getEnd()), (short) Symbol.getColumn(_symbol_par_bind.getEnd()));
        return new Symbol(_node_); :}
  ;
expr =
    var_ref.var_ref {: ASTNode _node_ = new VarExpr(var_ref);
        _node_.setStart(Symbol.getLine(_symbol_var_ref.getStart()), (short) Symbol.getColumn(_symbol_var_ref.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_var_ref.getEnd()), (short) Symbol.getColumn(_symbol_var_ref.getEnd()));
        return new Symbol(_node_); :}

  | INTEGER.INTEGER {: ASTNode _node_ = new IntExpr(Integer.valueOf(((String)INTEGER.value)));
        _node_.setStart(Symbol.getLine(INTEGER.getStart()), (short) Symbol.getColumn(INTEGER.getStart()));
        _node_.setEnd(Symbol.getLine(INTEGER.getEnd()), (short) Symbol.getColumn(INTEGER.getEnd()));
        return new Symbol(_node_); :}

  | TRUE.TRUE {: ASTNode _node_ = new BoolExpr(true);
        _node_.setStart(Symbol.getLine(TRUE.getStart()), (short) Symbol.getColumn(TRUE.getStart()));
        _node_.setEnd(Symbol.getLine(TRUE.getEnd()), (short) Symbol.getColumn(TRUE.getEnd()));
        return new Symbol(_node_); :}

  | FALSE.FALSE {: ASTNode _node_ = new BoolExpr(false);
        _node_.setStart(Symbol.getLine(FALSE.getStart()), (short) Symbol.getColumn(FALSE.getStart()));
        _node_.setEnd(Symbol.getLine(FALSE.getEnd()), (short) Symbol.getColumn(FALSE.getEnd()));
        return new Symbol(_node_); :}

  | expr.a PLUS.PLUS expr.b {: ASTNode _node_ = new AddExpr(a, b);
        _node_.setStart(Symbol.getLine(_symbol_a.getStart()), (short) Symbol.getColumn(_symbol_a.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_b.getEnd()), (short) Symbol.getColumn(_symbol_b.getEnd()));
        return new Symbol(_node_); :}
  ;
type =
    INTTY.INTTY {: ASTNode _node_ = new IntType();
        _node_.setStart(Symbol.getLine(INTTY.getStart()), (short) Symbol.getColumn(INTTY.getStart()));
        _node_.setEnd(Symbol.getLine(INTTY.getEnd()), (short) Symbol.getColumn(INTTY.getEnd()));
        return new Symbol(_node_); :}

  | BOOLTY.BOOLTY {: ASTNode _node_ = new BoolType();
        _node_.setStart(Symbol.getLine(BOOLTY.getStart()), (short) Symbol.getColumn(BOOLTY.getStart()));
        _node_.setEnd(Symbol.getLine(BOOLTY.getEnd()), (short) Symbol.getColumn(BOOLTY.getEnd()));
        return new Symbol(_node_); :}
  ;
par_bind =
    IDENTIFIER.IDENTIFIER COLON.COLON type.type ASSIGN.ASSIGN expr.expr {: ASTNode _node_ = new ParBind(((String)IDENTIFIER.value), new IntType(), expr);
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(_symbol_expr.getEnd()), (short) Symbol.getColumn(_symbol_expr.getEnd()));
        return new Symbol(_node_); :}
  ;
mod_ref =
    IDENTIFIER.IDENTIFIER {: ASTNode _node_ = new ModRef(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(IDENTIFIER.getEnd()), (short) Symbol.getColumn(IDENTIFIER.getEnd()));
        return new Symbol(_node_); :}
  ;
var_ref =
    IDENTIFIER.IDENTIFIER {: ASTNode _node_ = new VarRef(((String)IDENTIFIER.value));
        _node_.setStart(Symbol.getLine(IDENTIFIER.getStart()), (short) Symbol.getColumn(IDENTIFIER.getStart()));
        _node_.setEnd(Symbol.getLine(IDENTIFIER.getEnd()), (short) Symbol.getColumn(IDENTIFIER.getEnd()));
        return new Symbol(_node_); :}
  ;








